{"version":3,"file":"js/982.d1c247e4.js","mappings":"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","sources":["webpack://blog/./src/posts/Bukkit-Object-Pool-Picking-And-Updating.vue","webpack://blog/./src/posts/Bukkit-Object-Pool-Picking-And-Updating.vue?72f3"],"sourcesContent":["<template><div class=\"content\"><h1 class=\"post-title\">Bukkit 实现对象池随机抽取和定时更新<a class=\"header-anchor\" id=\"Bukkit%20%E5%AE%9E%E7%8E%B0%E5%AF%B9%E8%B1%A1%E6%B1%A0%E9%9A%8F%E6%9C%BA%E6%8A%BD%E5%8F%96%E5%92%8C%E5%AE%9A%E6%97%B6%E6%9B%B4%E6%96%B0\" href=\"#Bukkit%20%E5%AE%9E%E7%8E%B0%E5%AF%B9%E8%B1%A1%E6%B1%A0%E9%9A%8F%E6%9C%BA%E6%8A%BD%E5%8F%96%E5%92%8C%E5%AE%9A%E6%97%B6%E6%9B%B4%E6%96%B0\">#</a></h1><div class=\"metabar\"><div class=\"metabar-item\">2020/07/31</div><div class=\"metabar-item\">代码</div><div class=\"metabar-item\">约 26 分钟读完</div></div>\n<div class=\"notice tip\"><p>前置说明</p>\n<p>标题中的「对象池」并不是什么新的、高深的名词，而是代表一个「包含了一系列物体」的池。例如卡池、任务池。只有在池存在的情况下，才会有「抽取」这样的操作。为了叙述方便，本文将对象设定为「任务」，围绕一个任务插件来展开讨论。</p>\n</div>\n<p>最近入手了一个新的 Bukkit 项目，<a href=\"//github.com/sotapmc/MissionTap\" class=\"external-link\" target=\"_blank\" rel=\"noopener noreferrer\">MissionTap<span class=\"external-link-icon mdi mdi-launch\"></span></a>。由于我还是一个 Bukkit 萌新，所以要时刻写文章来反馈给自己进度，<s>以及水一些内容</s>。在这篇文章里，大概从两个方面进行叙述：</p>\n<ul>\n<li>从池中抽取对象，并独立存储在<em>另一个位置</em>。</li>\n<li>设计一种模式以便对对象定时刷新。</li>\n</ul>\n<p>要理解为什么要这样做，我们需要先了解一些背景。</p>\n<p>这个插件的用途，是根据池的内容，定时随机抽取一部分作为任务发放给玩家，其中这些任务的个数均为定值。任务可以分为每日任务、每周任务两种，每日任务需要每日刷新，每周任务需要每周刷新。当然，上述只是针对该项目的需求，实际上在阅读完文章后可以根据其抽象逻辑实现自己的要求。</p>\n<h2>建立对象池<a class=\"header-anchor\" id=\"%E5%BB%BA%E7%AB%8B%E5%AF%B9%E8%B1%A1%E6%B1%A0\" href=\"#%E5%BB%BA%E7%AB%8B%E5%AF%B9%E8%B1%A1%E6%B1%A0\">#</a></h2>\n<p>对象池该如何建立呢？最基本地，我们可以想到 Bukkit 经常使用到的 Yaml。因为毕竟 Bukkit 中与外部（文件）进行数据交互基本上都是基于 Yaml，如有不同意见请<a href=\"//github.com/Subilan/subilan.github.io/issues\" class=\"external-link\" target=\"_blank\" rel=\"noopener noreferrer\">指正<span class=\"external-link-icon mdi mdi-launch\"></span></a>。这个问题很好解决，我们只需要为我们的插件引入一个新的文件即可，就用这个文件来作为我们的「池」。</p>\n<div class=\"language-java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">win<span class=\"token punctuation\">.</span>subilan<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ExamplePlugin</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// import 部分省略</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ExamplePlugin</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JavaPlugin</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token comment\">// 前面的 onEnable 之类的后面再说</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">FileConfiguration</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> filename<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 获取当前插件所用的数据目录，也就是 config.yml 默认所在的位置</span>\n        <span class=\"token class-name\">File</span> folder <span class=\"token operator\">=</span> <span class=\"token function\">getDataFolder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// new 一个 File 出来，很简单</span>\n        <span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>folder<span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 离奇！如果这个文件夹不存在的话，还是帮忙创建一下</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>folder<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            folder<span class=\"token punctuation\">.</span><span class=\"token function\">mkdir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 如果文件不存在的话，就创建一个新的文件，这是正常的</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                file<span class=\"token punctuation\">.</span><span class=\"token function\">createNewFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 然后返回这个文件</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">YamlConfiguration</span><span class=\"token punctuation\">.</span><span class=\"token function\">loadConfiguration</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>上面这个函数就是一个基本的 Yaml 文件加载函数，而且有双重用途。由于我们写了一个「如果文件不存在就创建」的逻辑，所以一般情况下我们不需要担心这个问题。在 <code>onEnable</code> 中，我们只需要这样写就可以获取到这个文件</p>\n<div class=\"language-java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onEnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pool <span class=\"token operator\">=</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pool.yml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>其中 <code>pool</code> 为 <code>FileConfiguration</code>。如果这个文件是刚刚被自动建立，那么此时的 <code>pool</code> 就是一个 <code>null</code>。这样，我们就建立起了我们的「池」，用户可以自己往池里面写东西。如果围绕这个插件来讲，我们需要创建两个池，一个用来存储每日任务，一个用来存储每周任务：</p>\n<div class=\"language-java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dailyPool <span class=\"token operator\">=</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"daily-pool.yml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>weeklyPool <span class=\"token operator\">=</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"weekly-pool.yml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notice tip\"><p>💡 如无额外说明，下文中所有的文件名、变量名都与上文保持一致</p>\n</div>\n<p>至于内容究竟写什么，不是我们今天文章所探讨的范围。但是，我需要引用真正的插件中的格式，以便后文演示「从中随机抽取任务」。</p>\n<div class=\"language-yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">object1</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Mission 01\n    <span class=\"token key atrule\">lore</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> Hello<span class=\"token punctuation\">,</span> this is Mission 01\n        <span class=\"token punctuation\">-</span> Woooooooooooo~~ yeah<span class=\"token tag\">!</span>\n    <span class=\"token key atrule\">contents</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">trading</span><span class=\"token punctuation\">:</span> <span class=\"token number\">900</span>\n        <span class=\"token key atrule\">breeding</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">SHEEP</span><span class=\"token punctuation\">:</span> <span class=\"token number\">99</span>\n            <span class=\"token key atrule\">COW</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span>\n        <span class=\"token key atrule\">collecting</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">DIAMOND</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>\n</code></pre></div>\n<p>这就是一个对象的基本格式。不过仅针对于上面的那个插件，实际情况下，我们可以自己规定格式。这对后文的处理没有任何影响，仅作例子使用。我们可以将这个格式视为一个单独的对象，当用户需要往池中添加对象时，就按照该格式进行编写即可。最终，我们将得到这样一个文件：</p>\n<div class=\"language-yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">object1</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 格式...</span>\n<span class=\"token key atrule\">object2</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 格式...</span>\n<span class=\"token key atrule\">wdnmd</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 格式</span>\n<span class=\"token comment\"># MORE!</span>\n</code></pre></div>\n<p>为什么会有 <code>wdnmd</code> 这样的奇妙键名？在这里是为了说明每个对象中位于最高层的键（下文称顶级键）实际上除了标记以外任何用途。除非你愿意在这上面添加工序，一般情况下并无太大必要。</p>\n<p>由此，我们便得到了一个池子。每个池子都是这样构成的。</p>\n<h2>抽取对象<a class=\"header-anchor\" id=\"%E6%8A%BD%E5%8F%96%E5%AF%B9%E8%B1%A1\" href=\"#%E6%8A%BD%E5%8F%96%E5%AF%B9%E8%B1%A1\">#</a></h2>\n<p>要抽取对象，首先我们要从池子中获取对象。由于我们的抽取是全面的，因此应当一次性获取全部对象。</p>\n<div class=\"language-java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">FileConfiguration</span> pool <span class=\"token operator\">=</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"daily-pool.yml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>但这还不够！我们需要将其放入一个 Java 类型中，以便我们进行操作。在这里我们需要首先梳理一下随机抽取的思路。</p>\n<p>经过观察，我们发现 Bukkit 的 <code>FileConfiguration</code> 有两个关键方法：<code>getKeys(boolean)</code> 和 <code>getValues(boolean)</code>。至于这个 <code>boolean</code> 到底是干什么的，我们现在不需要知道。通过 Javadoc 可以得知它们的返回值一个是 <code>Map&lt;String,Object&gt;</code>，另一个是 <code>Set&lt;String&gt;</code>，因此我们认为<strong>这绝对又是一场噩梦</strong>。</p>\n<p>为了能够让后续的流程不乱套，我们先将这两个值获取出来。</p>\n<div class=\"language-java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> objects <span class=\"token operator\">=</span> pool<span class=\"token punctuation\">.</span><span class=\"token function\">getValues</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> keys <span class=\"token operator\">=</span> pool<span class=\"token punctuation\">.</span><span class=\"token function\">getKeys</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>由于 Java 中的 <code>Set</code> 类型在我们这个上下文中啥也不能干，我们需要将它转成 <code>List</code>。</p>\n<div class=\"language-java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> keyList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>keys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>你可能现在要想，既然我们已经有了 Map，为什么还要单独把键集获取出来？可以说的是，这里是顶级键唯一发挥作用的时刻。前文我们在建立池的时候，每一个对象前面都会有一个看似多余的顶级键，其实它的标记作用确定了这个对象在该文件中的「位置」。在这里，我们的 <code>keys</code> 里就是这些顶级键所构成的集合；我们的 <code>objects</code> 则是这些键下的具体内容。Map 的确同时具有键和值，在这里需要避免将 Map 的键与值和顶级键弄混。</p>\n<p>既然顶级键标记了每个对象的位置，那么我们便可以通过随机取到这些键来随机取到它们对应的值。因为 Map 并不好操作，我们可以直接从 List <code>keyList</code> 入手。大致逻辑如下</p>\n<div class=\"language-java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Random</span> rand <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> randomKey <span class=\"token operator\">=</span> keyList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span>keyList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>如果懂 <code>Random</code> 可以跳过这段话。在这里，<code>Random</code> 是（伪）随机数生成器，它在使用之前需要被实例化。它的实例有一个方法 <code>nextInt</code>，用于获取一个随机的整型。该方法的 Javadoc 叙述如下：</p>\n<blockquote>\n<p>Returns a pseudorandom, <strong>uniformly distributed int value between 0 (inclusive) and the specified value (exclusive)</strong>, drawn from this random number generator's sequence. The general contract of nextInt is that one int value in the specified range is pseudorandomly generated and returned. All bound possible int values are produced with (approximately) equal probability.</p>\n</blockquote>\n<p>不需要把它完全读完，粗体部分就足够。<code>nextInt</code> 获取到的随机数是范围性的，其范围为 <mjx-container class=\"MathJax\" jax=\"SVG\" style=\"direction: ltr; position: relative;\"><svg style=\"overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.312ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"9.493ex\" height=\"1.882ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 4196.1 832\" aria-hidden=\"true\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"mo\" transform=\"translate(777.8,0)\"><path data-c=\"2264\" d=\"M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(1833.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\" style=\"stroke-width: 3;\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(2711.3,0)\"><path data-c=\"3C\" d=\"M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(3767.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\" style=\"stroke-width: 3;\"></path></g></g></g></g></svg><mjx-assistive-mml unselectable=\"on\" display=\"inline\" style=\"top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mn>0</mn><mo>≤</mo><mrow data-mjx-texclass=\"ORD\"><mi>n</mi></mrow><mo>&lt;</mo><mrow data-mjx-texclass=\"ORD\"><mi>b</mi></mrow></math></mjx-assistive-mml></mjx-container>，其中 <mjx-container class=\"MathJax\" jax=\"SVG\" style=\"direction: ltr; position: relative;\"><svg style=\"overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"0.971ex\" height=\"1.595ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 429 705\" aria-hidden=\"true\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\" style=\"stroke-width: 3;\"></path></g></g></g></svg><mjx-assistive-mml unselectable=\"on\" display=\"inline\" style=\"top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>b</mi></math></mjx-assistive-mml></mjx-container> 为其参数 <code>bound</code>。恰好，List 的顺序是从 <code>0</code> 开始的。</p>\n<p>当我们有这样一个 List 时 <mjx-container class=\"MathJax\" jax=\"SVG\" style=\"direction: ltr; position: relative;\"><svg style=\"overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"18.638ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 8237.9 1000\" aria-hidden=\"true\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D43F\" d=\"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"mo\" transform=\"translate(958.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2014.6,0)\"><path data-c=\"7B\" d=\"M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2514.6,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3014.6,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"mn\" transform=\"translate(3459.2,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3959.2,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"mn\" transform=\"translate(4403.9,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4903.9,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"mn\" transform=\"translate(5348.6,0)\"><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"mo\" transform=\"translate(5848.6,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"mn\" transform=\"translate(6293.2,0)\"><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"mo\" transform=\"translate(6793.2,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"mn\" transform=\"translate(7237.9,0)\"><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"mo\" transform=\"translate(7737.9,0)\"><path data-c=\"7D\" d=\"M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z\" style=\"stroke-width: 3;\"></path></g></g></g></svg><mjx-assistive-mml unselectable=\"on\" display=\"inline\" style=\"top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>L</mi><mo>=</mo><mo fence=\"false\" stretchy=\"false\">{</mo><mn>1</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>6</mn><mo fence=\"false\" stretchy=\"false\">}</mo></math></mjx-assistive-mml></mjx-container>，它的大小 <code>L.size()</code> 为 6，Random 恰好为我们解决了 OutOfBound 的问题。由于随机数生成的范围只能是 <mjx-container class=\"MathJax\" jax=\"SVG\" style=\"direction: ltr; position: relative;\"><svg style=\"overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.312ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"9.493ex\" height=\"1.882ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 4196.1 832\" aria-hidden=\"true\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"mo\" transform=\"translate(777.8,0)\"><path data-c=\"2264\" d=\"M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(1833.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\" style=\"stroke-width: 3;\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(2711.3,0)\"><path data-c=\"3C\" d=\"M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(3767.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\" style=\"stroke-width: 3;\"></path></g></g></g></g></svg><mjx-assistive-mml unselectable=\"on\" display=\"inline\" style=\"top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mn>0</mn><mo>≤</mo><mrow data-mjx-texclass=\"ORD\"><mi>n</mi></mrow><mo>&lt;</mo><mrow data-mjx-texclass=\"ORD\"><mi>b</mi></mrow></math></mjx-assistive-mml></mjx-container> 即 <mjx-container class=\"MathJax\" jax=\"SVG\" style=\"direction: ltr; position: relative;\"><svg style=\"overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.312ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"9.654ex\" height=\"1.819ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -666 4267.1 804\" aria-hidden=\"true\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"mo\" transform=\"translate(777.8,0)\"><path data-c=\"2264\" d=\"M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(1833.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\" style=\"stroke-width: 3;\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(2711.3,0)\"><path data-c=\"3C\" d=\"M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(3767.1,0)\"><g data-mml-node=\"mn\"><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\" style=\"stroke-width: 3;\"></path></g></g></g></g></svg><mjx-assistive-mml unselectable=\"on\" display=\"inline\" style=\"top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mn>0</mn><mo>≤</mo><mrow data-mjx-texclass=\"ORD\"><mi>n</mi></mrow><mo>&lt;</mo><mrow data-mjx-texclass=\"ORD\"><mn>6</mn></mrow></math></mjx-assistive-mml></mjx-container>，可能取的值只有 <mjx-container class=\"MathJax\" jax=\"SVG\" style=\"direction: ltr; position: relative;\"><svg style=\"overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"18.796ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 8307.9 1000\" aria-hidden=\"true\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1028.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2084.6,0)\"><path data-c=\"7B\" d=\"M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2584.6,0)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3084.6,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"mn\" transform=\"translate(3529.2,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4029.2,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"mn\" transform=\"translate(4473.9,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4973.9,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"mn\" transform=\"translate(5418.6,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"mo\" transform=\"translate(5918.6,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"mn\" transform=\"translate(6363.2,0)\"><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"mo\" transform=\"translate(6863.2,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"mn\" transform=\"translate(7307.9,0)\"><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"mo\" transform=\"translate(7807.9,0)\"><path data-c=\"7D\" d=\"M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z\" style=\"stroke-width: 3;\"></path></g></g></g></svg><mjx-assistive-mml unselectable=\"on\" display=\"inline\" style=\"top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>P</mi><mo>=</mo><mo fence=\"false\" stretchy=\"false\">{</mo><mn>0</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>5</mn><mo fence=\"false\" stretchy=\"false\">}</mo></math></mjx-assistive-mml></mjx-container></p>\n<p>而该数组可取的最高位就是第 5 位（值为 <mjx-container class=\"MathJax\" jax=\"SVG\" style=\"direction: ltr; position: relative;\"><svg style=\"overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.05ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.131ex\" height=\"1.557ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -666 500 688\" aria-hidden=\"true\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\" style=\"stroke-width: 3;\"></path></g></g></g></svg><mjx-assistive-mml unselectable=\"on\" display=\"inline\" style=\"top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mn>6</mn></math></mjx-assistive-mml></mjx-container>）。</p>\n<p>接上文。我们从 keyList 中随机取到了一个键，接下来我们就可以用这个键来获取它对应的值——取键即取值。</p>\n<div class=\"language-java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Object</span> object <span class=\"token operator\">=</span> pool<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>randomKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>很明显，上面我们获取到的 <code>Map&lt;String,Object&gt; objects</code> 被抛弃了。的确，它在我们这里并没有用途，因为我们的最终目的是获取「池」中的对象，而不是对象中的值。仍然介绍这个值是为了启发你，也许你会用它去干别的事（例如预处理数据）。</p>\n<h3>抽取多个对象</h3>\n<p>我们来汇总一下我们先前的代码：</p>\n<div class=\"language-java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">FileConfiguration</span> pool <span class=\"token operator\">=</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"daily-pool.yml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> keyList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>pool<span class=\"token punctuation\">.</span><span class=\"token function\">getKeys</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Random</span> rand <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> randomKey <span class=\"token operator\">=</span> keyList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span>keyList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Object</span> object <span class=\"token operator\">=</span> pool<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>randomKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>抽取多个对象，也就是从 <code>keyList</code> 中抽取多个键，只需要用到循环就可解决。我们从第四行开始改写：</p>\n<div class=\"language-java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 预先声明变量，避免重复</span>\n<span class=\"token class-name\">String</span> randomKey<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> results <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 这里的数字就是你想要抽取对象的个数</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    randomKey <span class=\"token operator\">=</span> keyList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span>keyList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>randomKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n    results<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>randomKey<span class=\"token punctuation\">,</span> pool<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>randomKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>我们还是用到了 Map。在这里用 Map 有两个理由：</p>\n<ol>\n<li>使用 <code>containsKey</code> 方法来检测这个键是不是之前已经被随机到*</li>\n<li>后文中将抽取到的对象储存起来，高效的办法只有使用 Map</li>\n</ol>\n<p><small>* 由于该随机数的范围一般较小，所以被重复随机的概率不是没有。我们不愿意将重复的元素添加到 Map 中，因此要对其重复性进行检测。</small></p>\n<h2>写入对象<a class=\"header-anchor\" id=\"%E5%86%99%E5%85%A5%E5%AF%B9%E8%B1%A1\" href=\"#%E5%86%99%E5%85%A5%E5%AF%B9%E8%B1%A1\">#</a></h2>\n<p>若要写入对象，需要灵活运用 <code>FileConfiguration</code> 的方法。纵观前面我们进行的行为，实则是这样的</p>\n<p><img src=\"https://i.loli.net/2020/07/31/UPyv5s8I2EN4rkq.png\" alt=\"\"></p>\n<p>也就是说我们只是把一个池内的对象抽到了另一个池（用户不可改变）里，文件内容、数据结构都是一样的。那么这就很好办了。</p>\n<div class=\"language-java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onEnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>resultPool <span class=\"token operator\">=</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result-pool.yml\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>首先我们创建一个用于存储挑选出来内容的 Yaml，即后文中的「存储池」。然后，我们开始写入。</p>\n<div class=\"language-java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 先清空先前生成的内容，因为每次生成都是覆盖性操作</span>\nresultPool<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"daily\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nresultPool<span class=\"token punctuation\">.</span><span class=\"token function\">createSection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"daily\"</span><span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>没错，这就完事了。假设 object1 和 objectN 被选中，最终我们获取到的文件结构就是</p>\n<div class=\"language-yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token comment\"># result-pool.yml</span>\n<span class=\"token key atrule\">daily</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">object1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Mission 01\n        <span class=\"token key atrule\">lore</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> Hello<span class=\"token punctuation\">,</span> this is Mission 01\n            <span class=\"token punctuation\">-</span> Woooooooooooo~~ yeah<span class=\"token tag\">!</span>\n        <span class=\"token key atrule\">contents</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">trading</span><span class=\"token punctuation\">:</span> <span class=\"token number\">900</span>\n            <span class=\"token key atrule\">breeding</span><span class=\"token punctuation\">:</span>\n                <span class=\"token key atrule\">SHEEP</span><span class=\"token punctuation\">:</span> <span class=\"token number\">99</span>\n                <span class=\"token key atrule\">COW</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span>\n            <span class=\"token key atrule\">collecting</span><span class=\"token punctuation\">:</span>\n                <span class=\"token key atrule\">DIAMOND</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>\n    <span class=\"token key atrule\">objectN</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 略</span>\n</code></pre></div>\n<p>幸亏 Bukkit 提供了一个快捷的 <code>createSection</code> 方法。它的第一个参数是键名，也就是这里的 <code>daily</code>，第二个参数所要求的类型是 Map，恰好符合我们前面的 <code>results</code> 值类型，这也是为什么我们不去用其它类型。</p>\n<p>至此，我们获得了随机从一个池抽取对象，然后写入到另一个用于存储的静态池的能力，实现逻辑阐述完毕。</p>\n<h2>定时更新的基本思路<a class=\"header-anchor\" id=\"%E5%AE%9A%E6%97%B6%E6%9B%B4%E6%96%B0%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%80%9D%E8%B7%AF\" href=\"#%E5%AE%9A%E6%97%B6%E6%9B%B4%E6%96%B0%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%80%9D%E8%B7%AF\">#</a></h2>\n<p>我们的插件要求是对存储池定时更新。也就是我们需要定时对存储池的内容进行覆盖操作，保证在更新后的内容<em>大致</em>与先前不一样。</p>\n<div class=\"notice warning\"><p>在这里，我们无法保证两次获取到的 <code>results</code> Map 的内容完全不一样，也没有必要保证它们完全不一样——如果认为这样不合理，只能从根本模式上做出改变。</p>\n</div>\n<p>这也是为什么前文中出现了 <code>resultPool.set(\"daily\", null)</code> 这样一句。每次所生成的 Map 是<strong>基于随机目的</strong>的。因此如果不加以清空，将会变成积累操作，到最后一切都一样了。那么究竟该如何进行定时更新？如何判断现在该不该进行更新呢？</p>\n<p>最简单的方法，就是在每一次将对象写入存储池时，同步地往池中写入下一次更新的时间。因为我们只有在每次写入的时候，才能知道下一次是什么时候，只有在这时将它记录下来，将来才能够使用。我们首先需要在 <code>config.yml</code> 中提供以下两项：</p>\n<div class=\"language-yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">daily_refresh_time</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>\n<span class=\"token key atrule\">weekly_refresh_time</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6</span>\n</code></pre></div>\n<p>这两项将成为我们实现该功能的核心依赖，它们规定了究竟应当在何时进行刷新。对于每日刷新的情况，只需要规定在一天的第几个小时（<mjx-container class=\"MathJax\" jax=\"SVG\" style=\"direction: ltr; position: relative;\"><svg style=\"overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.312ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"10.785ex\" height=\"1.819ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -666 4767.1 804\" aria-hidden=\"true\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"mo\" transform=\"translate(777.8,0)\"><path data-c=\"2264\" d=\"M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(1833.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\" style=\"stroke-width: 3;\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(2711.3,0)\"><path data-c=\"2264\" d=\"M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(3767.1,0)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" style=\"stroke-width: 3;\"></path><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\" transform=\"translate(500,0)\" style=\"stroke-width: 3;\"></path></g></g></g></g></svg><mjx-assistive-mml unselectable=\"on\" display=\"inline\" style=\"top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mn>0</mn><mo>≤</mo><mrow data-mjx-texclass=\"ORD\"><mi>n</mi></mrow><mo>≤</mo><mrow data-mjx-texclass=\"ORD\"><mn>23</mn></mrow></math></mjx-assistive-mml></mjx-container>）；对每周刷新的情况，只需要规定在一周的第几天（<mjx-container class=\"MathJax\" jax=\"SVG\" style=\"direction: ltr; position: relative;\"><svg style=\"overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.312ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"9.654ex\" height=\"1.842ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -676 4267.1 814\" aria-hidden=\"true\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"mo\" transform=\"translate(777.8,0)\"><path data-c=\"2264\" d=\"M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(1833.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\" style=\"stroke-width: 3;\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(2711.3,0)\"><path data-c=\"2264\" d=\"M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(3767.1,0)\"><g data-mml-node=\"mn\"><path data-c=\"37\" d=\"M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z\" style=\"stroke-width: 3;\"></path></g></g></g></g></svg><mjx-assistive-mml unselectable=\"on\" display=\"inline\" style=\"top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mn>1</mn><mo>≤</mo><mrow data-mjx-texclass=\"ORD\"><mi>n</mi></mrow><mo>≤</mo><mrow data-mjx-texclass=\"ORD\"><mn>7</mn></mrow></math></mjx-assistive-mml></mjx-container>，<mjx-container class=\"MathJax\" jax=\"SVG\" style=\"direction: ltr; position: relative;\"><svg style=\"overflow: visible; min-height: 1px; min-width: 1px; vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.131ex\" height=\"1.507ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -666 500 666\" aria-hidden=\"true\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\" style=\"stroke-width: 3;\"></path></g></g></g></svg><mjx-assistive-mml unselectable=\"on\" display=\"inline\" style=\"top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mn>1</mn></math></mjx-assistive-mml></mjx-container> 代表星期日）。</p>\n<p>接下来，让我们往上面的代码中添加内容。</p>\n<h2>定时更新的实现<a class=\"header-anchor\" id=\"%E5%AE%9A%E6%97%B6%E6%9B%B4%E6%96%B0%E7%9A%84%E5%AE%9E%E7%8E%B0\" href=\"#%E5%AE%9A%E6%97%B6%E6%9B%B4%E6%96%B0%E7%9A%84%E5%AE%9E%E7%8E%B0\">#</a></h2>\n<div class=\"language-java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">FileConfiguration</span> pool <span class=\"token operator\">=</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"daily-pool.yml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> keyList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>pool<span class=\"token punctuation\">.</span><span class=\"token function\">getKeys</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Random</span> rand <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> randomKey<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> results <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    randomKey <span class=\"token operator\">=</span> keyList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span>keyList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>randomKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n    results<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>randomKey<span class=\"token punctuation\">,</span> pool<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>randomKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nresultPool<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"daily\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nresultPool<span class=\"token punctuation\">.</span><span class=\"token function\">createSection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"daily\"</span><span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>在这个逻辑中，我们在 <code>while</code> 循环后面添加上携带下次更新时间的代码。</p>\n<div class=\"language-java\"><pre class=\"language-java\"><code class=\"language-java\">resultPool<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"daily-next-refresh\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getDailyNextRefreshDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 注：第二个参数在下文中有变化</span>\n</code></pre></div>\n<p>Weekly 也是同样。</p>\n<p>这两个函数的实现大同小异，首先我们展示 Daily 的实现。为了叙述方便，我们的配置文件内容沿用上文中的</p>\n<div class=\"language-yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">daily_refresh_time</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>\n<span class=\"token key atrule\">weekly_refresh_time</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6</span>\n</code></pre></div>\n<p>即在每天的上午 10 时刷新每日池，在每个星期五刷新每周池。</p>\n<h3>每日池刷新</h3>\n<p>首先我们需要明确的一点是，<strong>随机抽取并写入存储池的时间不是确定的</strong>。你可能会认为，既然用户规定了刷新的时间，那么掌控刷新操作的函数一定是在那个时间被执行，那么只需要将下次刷新时间基于那次的时间进行推算（加 24 小时、加 7 天）即可，但这是不对的。至于为什么会发生这种情况，可以理解如下代码：</p>\n<div class=\"language-java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onEnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pool <span class=\"token operator\">=</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pool.yml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>resultPool <span class=\"token operator\">=</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result-pool.yml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 如果存储池是空的</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resultPool <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 忽略时间，直接生成随机对象并写入存储池</span>\n        <span class=\"token function\">generateRandomObjectsFromPool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 有条件地进行存储池刷新</span>\n        <span class=\"token function\">updateResultPool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>我们无法推测用户是什么时候开启的服务器，因此需要在 <code>onEnable</code> 中加入一系列的验证。例如，当用户是第一次安装这个插件，存储池是空的，这个时候作为初始化操作，无论何时都应当生成随机对象并写入存储池。在这里，我们发现时间已经不是确定的了。同时，如果服务器长期处于关闭状态，又再一次开启，可能已经错过了上次的刷新时间，这时我们就需要进行补充刷新（如果你认为这个逻辑是多余的，可以去掉）。</p>\n<p>那么我们就需要一个通用的函数，通过任意时间推算出下次的刷新时间。请看函数</p>\n<div class=\"language-java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Date</span> <span class=\"token function\">getDailyNextRefreshTime</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FileConfiguration</span> config<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Calendar</span> cal <span class=\"token operator\">=</span> <span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cal<span class=\"token punctuation\">.</span><span class=\"token function\">setTime</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Integer</span> now <span class=\"token operator\">=</span> cal<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token constant\">HOUR_OF_DAY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Integer</span> refreshHour <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span><span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"daily_refresh_time\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>now <span class=\"token operator\">&gt;=</span> refreshHour<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        cal<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DATE</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cal<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token constant\">HOUR_OF_DAY</span><span class=\"token punctuation\">,</span> refreshHour<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cal<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MINUTE</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cal<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECOND</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> cal<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>在这里我们需要用到两个工具：<code>Calendar</code> 和 <code>Date</code>。至于它们两个的区别，属于 Java 的基础内容，在这里不再供述，但仍会解释其大致作用。首先我们需要初始化一个 Calendar 对象</p>\n<div class=\"language-java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Calendar</span> cal <span class=\"token operator\">=</span> <span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notice tip\"><p>为什么不是 <code>new Calendar()</code>？因为 Calendar 是一个 abstract class，它不能被实例化。该 <code>getInstance()</code> 方法返回的实际上是一个叫做 <code>GregorianCalendar</code> 的实例。上述语句等同于 <code>Calendar cal = new GregorianCalendar();</code></p>\n</div>\n<p>然后将这个对象设置为<strong>现在</strong>的时间。</p>\n<div class=\"language-java\"><pre class=\"language-java\"><code class=\"language-java\">cal<span class=\"token punctuation\">.</span><span class=\"token function\">setTime</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>接下来是推理环节。借助 Calendar 我们可以获取到当前的小时数。例如若现在是 <code>22:35</code>，小时数则为 <code>22</code>。在配置文件中，我们也规定了在每天的第几个小时刷新（标准刷新时间）。如果现在的小时数晚于或恰好为标准刷新时间（不太可能，因为有延迟和程序处理的时间），也就是说现在的刷新操作发生在标准刷新时间以后或恰好在标准刷新时间之时，那么下一次刷新必定在明天，所以我们将 Calendar 实例加上 1 天。</p>\n<div class=\"language-java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 获取当前小时数</span>\n<span class=\"token class-name\">Integer</span> now <span class=\"token operator\">=</span> cal<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token constant\">HOUR_OF_DAY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 获取标准刷新时间</span>\n<span class=\"token class-name\">Integer</span> refreshHour <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span><span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"daily_refresh_time\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 如果当前小时晚于或恰好等于标准刷新时间</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>now <span class=\"token operator\">&gt;=</span> refreshHour<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    cal<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DATE</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>而如果刷新操作处于标准刷新时间之前，是怎样一种情况？也许是首次安装插件以后，第一次启动时的强制初始化早于标准刷新时间；也许是很久没有开启服务器，打开服务器后由于时间远远晚于上次更新时写入的下次刷新时间而进行强制初始化。无论如何，这些初始化行为都无法影响到这一天的下一次刷新。因此，当发生这种情况时，一天内有两次刷新，因此不需要将 Calendar 实例加上 1 天，所以会在 <code>if</code> 的外面。</p>\n<div class=\"language-java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 必定：将下一次刷新时间的小时设置为配置文件中的值</span>\ncal<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token constant\">HOUR_OF_DAY</span><span class=\"token punctuation\">,</span> refreshHour<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 避免影响，将其余单位均设为 0（GregorianCalendar 最小单位是秒）</span>\ncal<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MINUTE</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncal<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECOND</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回一个 Date 类型</span>\n<span class=\"token keyword\">return</span> cal<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>以上便获取到了每日池的下次刷新时间。</p>\n<h3>每周池刷新</h3>\n<p>每周池的前一部分逻辑是一样的。</p>\n<div class=\"language-java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Date</span> <span class=\"token function\">getWeeklyNextRefreshTime</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FileConfiguration</span> config<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Calendar</span> cal <span class=\"token operator\">=</span> <span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cal<span class=\"token punctuation\">.</span><span class=\"token function\">setTime</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Integer</span> today <span class=\"token operator\">=</span> cal<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DAY_OF_WEEK</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Integer</span> refreshDay <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span><span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"weekly_refresh_time\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Integer</span> nextWeekdayOffset <span class=\"token operator\">=</span> today <span class=\"token operator\">&lt;</span> refreshDay <span class=\"token operator\">?</span> refreshDay <span class=\"token operator\">-</span> today <span class=\"token operator\">:</span> refreshDay <span class=\"token operator\">+</span> <span class=\"token number\">7</span> <span class=\"token operator\">-</span> today<span class=\"token punctuation\">;</span>\n    cal<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DAY_OF_MONTH</span><span class=\"token punctuation\">,</span> nextWeekdayOffset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> cal<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>甚至比 Daily 的逻辑要短。核心在于要获取一个 <code>nextWeekdayOffset</code> 偏移量，然后将这个偏移量作为天数，在今天的日期基础上做加法。</p>\n<p>首先要获取今天是一周的第几天（星期日是第一天），然后获取配置文件的数据。</p>\n<div class=\"language-java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Integer</span> today <span class=\"token operator\">=</span> cal<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DAY_OF_WEEK</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Integer</span> refreshDay <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span><span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"weekly_refresh_time\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>如果现在早于标准刷新时间，那么下一次的刷新时间相对于今天的偏移量就是它们的差值。例如今天是星期一，标准刷新时间是星期五，那么偏移量就是 <code>4</code>。这就是三目表达式前部分的内容 <code>today &lt; refreshDay ? refreshDay - today : ...</code>。如果今天恰好是标准刷新时间，或者今天晚于标准刷新时间，那么下一个刷新时间就在下个星期。</p>\n<p>一般来讲，由于星期是七进制，如果我们要获取下一个星期（下一个七）的日期，我们通常会采取「加七」操作。在这里也是一样，我们将 <code>refreshDay</code> 加上七就可以获取到相对于 <code>refreshDay</code> 的每月首周体系的次周日期数值，这个词语看不懂没关系，因为是我随便写的。用 <code>refreshDay + 7</code> 得到的数值，再减去原 <code>today</code> 的值，就得到了今天相对于下一个星期的标准刷新时间的偏移量，再用日期加上该偏移量即可。这就是三目表达式的后部分内容 <code>... : refreshDay + 7 - today</code>。</p>\n<div class=\"language-java\"><pre class=\"language-java\"><code class=\"language-java\">cal<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DAY_OF_MONTH</span><span class=\"token punctuation\">,</span> nextWeekdayOffset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> cal<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>在实际使用中，我们仅需获取时间戳进行存储：</p>\n<div class=\"language-java\"><pre class=\"language-java\"><code class=\"language-java\">resultPool<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"daily-next-refresh\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getDailyNextRefreshDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nresultPool<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"weekly-next-refresh\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getWeeklyNextRefreshDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>读取时，判断当前的时间戳是否已经超过了先前写入的下次刷新时间的时间戳，如果是，则强制进行刷新。</p>\n<div class=\"language-java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Long</span> dailyNextRefresh <span class=\"token operator\">=</span> resultPool<span class=\"token punctuation\">.</span><span class=\"token function\">getLong</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"daily-next-refresh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Long</span> weeklyNextRefresh <span class=\"token operator\">=</span> resultPool<span class=\"token punctuation\">.</span><span class=\"token function\">getLong</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"weekly-next-refresh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Long</span> now <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>now <span class=\"token operator\">&gt;=</span> dailyNextRefresh<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 强制刷新每日池</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>now <span class=\"token operator\">&gt;=</span> weeklyNextRefresh<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 强制刷新每周池</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>在这里便会出现上文中提到过的一周两次刷新、一天两次刷新的情况，其中一次刷新便是这里的强制刷新。</p>\n<p>对于服务器长期处于开启状态的刷新，需要借助 <code>BukkitRunnable</code> 每秒进行检测，所执行的逻辑与上面的代码完全一致，具体方法请自行探索，如果有机会也许会有文章。</p>\n</div></template>","import { render } from \"./Bukkit-Object-Pool-Picking-And-Updating.vue?vue&type=template&id=ec6ff8de\"\nconst script = {}\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["class","_createStaticVNode","_createElementVNode","style","xmlns","width","height","role","focusable","viewBox","stroke","fill","transform","d","_hoisted_39","_hoisted_42","_hoisted_47","_hoisted_51","_hoisted_54","_hoisted_57","_hoisted_60","_hoisted_91","_hoisted_94","_hoisted_97","_createElementBlock","_hoisted_1","_hoisted_2","_createTextVNode","_hoisted_37","_createVNode","_component_mjx_container","jax","default","_withCtx","_hoisted_38","_hoisted_40","_component_mjx_assistive_mml","unselectable","display","_component_math","_component_mn","_","_component_mo","_component_mrow","_component_mi","_hoisted_41","_hoisted_43","_hoisted_44","_hoisted_45","_hoisted_46","_hoisted_48","fence","stretchy","_hoisted_49","_hoisted_50","_hoisted_52","_hoisted_53","_hoisted_55","_hoisted_56","_hoisted_58","_hoisted_59","_hoisted_61","_hoisted_62","_hoisted_90","_hoisted_92","_hoisted_93","_hoisted_95","_hoisted_96","_hoisted_98","_hoisted_99","script","__exports__","render"],"sourceRoot":""}