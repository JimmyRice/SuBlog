"use strict";(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[317],{7317:function(n,a,s){s.r(a),s.d(a,{default:function(){return F}});var t=s(3396),p=s(7139);const o={class:"content"},e=(0,t.uE)('<h1 class="post-title">对于包含日期数组的处理<a class="header-anchor" id="%E5%AF%B9%E4%BA%8E%E5%8C%85%E5%90%AB%E6%97%A5%E6%9C%9F%E6%95%B0%E7%BB%84%E7%9A%84%E5%A4%84%E7%90%86" href="#%E5%AF%B9%E4%BA%8E%E5%8C%85%E5%90%AB%E6%97%A5%E6%9C%9F%E6%95%B0%E7%BB%84%E7%9A%84%E5%A4%84%E7%90%86">#</a></h1><div class="metabar"><div class="metabar-item">2020/04/24</div><div class="metabar-item">代码</div><div class="metabar-item">约 9 分钟读完</div></div><p>由于最近业余开发了一个时间轴的程序（但这个程序的主体不是时间轴），将不同的事件按照时间点记录下来，并仿照 <a href="https://www.githubstatus.com/" class="external-link" target="_blank" rel="noopener noreferrer">https://www.githubstatus.com/<span class="external-link-icon mdi mdi-launch"></span></a> 的样式从上到下排列下来。由于是第一次做这方面的东西，遇到了很多问题，也收获了一些经验，在这里分享一下。</p><h2>时间线简介<a class="header-anchor" id="%E6%97%B6%E9%97%B4%E7%BA%BF%E7%AE%80%E4%BB%8B" href="#%E6%97%B6%E9%97%B4%E7%BA%BF%E7%AE%80%E4%BB%8B">#</a></h2><p>我们首先约定，时间轴上存在个体的基本单位叫「事件」。例如今天 <code>2020/04/24 12:30:30</code> 发生了事件 A，那么我们就把它记录下来；当今天 <code>2020/04/24 13:59:59</code> 又发生了事件 B，我们也把它记录下来。直到最后在时间轴上显示出来。</p><p>为了叙述方便，我们首先看看<strong>时间轴</strong>到底长什么样：</p><p><img src="https://i.loli.net/2020/04/24/2IKDEmjxehdRMJr.png" alt=""></p><p><em>GitHub 昨天晚上又崩了啊啊啊啊啊啊啊啊</em></p><p>这就是时间轴，发生在同一天的事件会被归类到这一天下，然后再根据时间点分别排列事件的内容。然后针对之前的每一天，就像这样排列着</p><p><img src="https://i.loli.net/2020/04/24/iahYfX7Fz4HgDpI.png" alt=""></p><p>这样便可以准确地反映一个轴的概念——左侧是一个代表「轴」的竖线，上面穿插着日期，每一天都有记录。如果这一天发生了什么事情，就把具体的时间点（时、分、秒）记录下来，然后将这个事件的具体内容表示出来。</p><h2>记录时间与写入数据库<a class="header-anchor" id="%E8%AE%B0%E5%BD%95%E6%97%B6%E9%97%B4%E4%B8%8E%E5%86%99%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93" href="#%E8%AE%B0%E5%BD%95%E6%97%B6%E9%97%B4%E4%B8%8E%E5%86%99%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93">#</a></h2><p>接下来说说如何记录时间。其实很简单，在插入数据库的时候生成时间就好了。为了方便，我们生成的时间是可以被应用到 JavaScript 的 <code>Date</code> 对象的。格式大概如下：</p><div class="notice tip"><p>:snake: 以下语句来自 Python 语言。</p></div><div class="language-python"><pre class="language-python"><code class="language-python"><span class="token keyword">import</span> time\n\n<span class="token comment"># ...</span>\n\ndate <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">&quot;%Y-%m-%d %H:%M:%S&quot;</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><p>那么此时我们的数据库里应该记录了这个事件的内容和时间，但似乎还缺点什么。那就是自增键。对于任何一个可以无限扩大的数据集合，我们都要想办法把它们编号。因为除了 ID 以外没有更好更简单的方式来确定某一条数据的身份（仅限当前讨论范围内）。现在我们的表结构可以这样表示</p><div class="language-sql"><pre class="language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>Events<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>\n    <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>\n    <span class="token identifier"><span class="token punctuation">`</span>title<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n    <span class="token identifier"><span class="token punctuation">`</span>contents<span class="token punctuation">`</span></span> <span class="token keyword">text</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n    <span class="token identifier"><span class="token punctuation">`</span>date<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span>\n</code></pre></div><p>可以看到，我们将事件的内容分为了两个部分，<code>title</code> 和 <code>contents</code>；然后我们确定了一个自增键 <code>id</code> 用于给每条数据一个特殊的标识；最后就是记录这篇发布的日期。至此，我们就大概完成了数据的写入部分，实际操作起来按照一般逻辑即可。</p><h2>获取数据和数组结构<a class="header-anchor" id="%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E5%92%8C%E6%95%B0%E7%BB%84%E7%BB%93%E6%9E%84" href="#%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E5%92%8C%E6%95%B0%E7%BB%84%E7%BB%93%E6%9E%84">#</a></h2><p>获取数据时，我们会出现一些疑问。如果我们直接获取这些数据库里面的数据，很有可能得到下面的这个数组：</p><div class="language-javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n        <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;example1&quot;</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">contents</span><span class="token operator">:</span> <span class="token string">&quot;example1-content&quot;</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token string">&quot;2020/05/01 21:38:29&quot;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n        <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;example2&quot;</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">contents</span><span class="token operator">:</span> <span class="token string">&quot;example2-content&quot;</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token string">&quot;2020/05/01 22:59:30&quot;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre></div><p>如果这个时候直接拿到前端去渲染，一定会出现很多问题。因为这个数组里的每个对象都是独立的，但是它们的时间却又有可能处于同一天。我们的目的是将同一天的两个事件合并，然后再根据具体的时分秒在当天进行排序。如何合并？这就需要对数组采取一定的操作。</p><p>我们首先需要想象出一个结构，来很好地处理这样一个需求。我们的需求是，忽略事件，当日期重复时，对其进行合并。究竟如何合并呢？这个时候我们的第一步是<strong>找到这些数据的共性</strong>。比如，目前为止我们能找到的共性只有日期这一个。当我们添加更多内容时，就有可能产生更多的共性。接下来仅围绕 <code>date</code> 这一个共性来讨论。</p><p>既然有了共性，说明这些数据包含可以分享的部分，那么我们很容易得到如下结构</p><div class="language-javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n        <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token string">&quot;2020/05/01&quot;</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">events</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n            <span class="token punctuation">{</span>\n                <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n                <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;example1&quot;</span><span class="token punctuation">,</span>\n                <span class="token literal-property property">contents</span><span class="token operator">:</span> <span class="token string">&quot;example1-content&quot;</span><span class="token punctuation">,</span>\n                <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token string">&quot;21:38:29&quot;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">{</span>\n                <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n                <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;example2&quot;</span><span class="token punctuation">,</span>\n                <span class="token literal-property property">contents</span><span class="token operator">:</span> <span class="token string">&quot;example2-content&quot;</span><span class="token punctuation">,</span>\n                <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token string">&quot;22:59:30&quot;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre></div><p>这些处于同一天的数据被分类在一个对象的属性里，它们的 <code>date</code> 属性被拆分为了两个部分，<code>date.split(&quot; &quot;)[0]</code> 作为日期被放在了「公共区」，<code>date.split(&quot; &quot;)[1]</code> 则作为具体的事件被存储到每个独立的事件里。</p><p>这个结构就可以被前端很好地处理，只需要进行两次遍历。例如在 Vue 中</p>',27),c={class:"language-html"},l={class:"language-html"},u={class:"language-html"},k=(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("template")]),(0,t._)("span",{class:"token punctuation"},">")],-1),r=(0,t.uE)('<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>k in data<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>',1),i=(0,t.uE)('<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>meta<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>',1),d=(0,t.uE)('<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>date-icon<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>',1),g=(0,t.uE)('<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>date<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>',1),E=(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("div")]),(0,t._)("span",{class:"token punctuation"},">")],-1),y=(0,t.uE)('<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>events<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>a in k.events<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>',1),m=(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("h1")]),(0,t._)("span",{class:"token punctuation"},">")],-1),v=(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("h1")]),(0,t._)("span",{class:"token punctuation"},">")],-1),q=(0,t.uE)('<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>time<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>',1),B=(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("span")]),(0,t._)("span",{class:"token punctuation"},">")],-1),h=(0,t.uE)('<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>a.id<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>',1),_=(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("span")]),(0,t._)("span",{class:"token punctuation"},">")],-1),f=(0,t.uE)('<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>event-content<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>',1),w=(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("div")]),(0,t._)("span",{class:"token punctuation"},">")],-1),A=(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("div")]),(0,t._)("span",{class:"token punctuation"},">")],-1),U=(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("div")]),(0,t._)("span",{class:"token punctuation"},">")],-1),b=(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("template")]),(0,t._)("span",{class:"token punctuation"},">")],-1),j=(0,t.uE)('<p><em>仅供思路参考，实际使用需要额外处理</em></p><p>那么又引出了一个问题，该如何把上面的数组变成我们想象的那个样子呢？</p><h2>数组的处理<a class="header-anchor" id="%E6%95%B0%E7%BB%84%E7%9A%84%E5%A4%84%E7%90%86" href="#%E6%95%B0%E7%BB%84%E7%9A%84%E5%A4%84%E7%90%86">#</a></h2><div class="notice tip"><p>☕📔 以下语句来自 JavaScript 语言</p></div><p>数组的处理环节是最让人头疼的。我们先把完整的代码放出来，再一行行解释。</p><div class="language-javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createArray</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">k<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> ix <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> d <span class="token operator">=</span> k<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> date <span class="token operator">=</span> d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> time <span class="token operator">=</span> d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> sameDay <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">r<span class="token punctuation">,</span> j</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>date <span class="token operator">===</span> r<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                ix <span class="token operator">=</span> j<span class="token punctuation">;</span>\n                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sameDay<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n                <span class="token literal-property property">date</span><span class="token operator">:</span> date<span class="token punctuation">,</span>\n                <span class="token literal-property property">events</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n                    <span class="token punctuation">{</span>\n                        <span class="token literal-property property">id</span><span class="token operator">:</span> k<span class="token punctuation">.</span>id<span class="token punctuation">,</span>\n                        <span class="token literal-property property">title</span><span class="token operator">:</span> k<span class="token punctuation">.</span>title<span class="token punctuation">,</span>\n                        <span class="token literal-property property">contents</span><span class="token operator">:</span> k<span class="token punctuation">.</span>contents<span class="token punctuation">,</span>\n                        <span class="token literal-property property">time</span><span class="token operator">:</span> time<span class="token punctuation">,</span>\n                    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token punctuation">]</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            arr<span class="token punctuation">[</span>ix<span class="token punctuation">]</span><span class="token punctuation">.</span>events<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n                <span class="token literal-property property">id</span><span class="token operator">:</span> k<span class="token punctuation">.</span>id<span class="token punctuation">,</span>\n                <span class="token literal-property property">title</span><span class="token operator">:</span> k<span class="token punctuation">.</span>title<span class="token punctuation">,</span>\n                <span class="token literal-property property">contents</span><span class="token operator">:</span> k<span class="token punctuation">.</span>contents<span class="token punctuation">,</span>\n                <span class="token literal-property property">time</span><span class="token operator">:</span> time<span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> arr<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>首先我们新声明一个数组 <code>let arr = []</code>，然后将数据中的日期分割 <code>k.date.split(&quot; &quot;)</code>。后面用到了很重要的一点，<code>Array.prototype.some</code> 函数。这个函数用于判断是否通过了回调函数中指定的测试，返回一个布尔值。在这里我们手动在回调函数里加上了一行，<code>ix = j</code>，用于记录日期相同的对象所在的位置。</p><p><code>some</code> 函数返回的布尔值被记录在 <code>sameDay</code> 这个变量中，如果为 <code>true</code> 就代表在同一天。下方判断 <code>if (!sameDay)</code>，如果通过，就会在新声明的数组里初始化一个结构——</p><div class="language-javascript"><pre class="language-javascript"><code class="language-javascript">arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">date</span><span class="token operator">:</span> date<span class="token punctuation">,</span>\n    <span class="token literal-property property">events</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n            <span class="token literal-property property">id</span><span class="token operator">:</span> k<span class="token punctuation">.</span>id<span class="token punctuation">,</span>\n            <span class="token literal-property property">title</span><span class="token operator">:</span> k<span class="token punctuation">.</span>title<span class="token punctuation">,</span>\n            <span class="token literal-property property">contents</span><span class="token operator">:</span> k<span class="token punctuation">.</span>contents<span class="token punctuation">,</span>\n            <span class="token literal-property property">time</span><span class="token operator">:</span> time<span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>这个结构记录一个日期和一个 <code>events</code> 属性，如果有和这个日期重复的 <code>event</code>，就会被拆分后 <code>push</code> 到里面（依据 <code>ix</code> 来寻址）：</p><div class="language-javascript"><pre class="language-javascript"><code class="language-javascript"> arr<span class="token punctuation">[</span>ix<span class="token punctuation">]</span><span class="token punctuation">.</span>events<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">id</span><span class="token operator">:</span> k<span class="token punctuation">.</span>id<span class="token punctuation">,</span>\n    <span class="token literal-property property">title</span><span class="token operator">:</span> k<span class="token punctuation">.</span>title<span class="token punctuation">,</span>\n    <span class="token literal-property property">contents</span><span class="token operator">:</span> k<span class="token punctuation">.</span>contents<span class="token punctuation">,</span>\n    <span class="token literal-property property">time</span><span class="token operator">:</span> time<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>实际运行效果如下：</p><p><img src="https://i.loli.net/2020/04/24/GfcwK4nSRYat6rl.png" alt=""></p>',13);function x(n,a){const s=(0,t.up)("router-link");return(0,t.wg)(),(0,t.iD)("div",o,[e,(0,t._)("div",c,[(0,t._)("pre",l,[(0,t._)("code",u,[k,(0,t.Uk)("\n    "),r,(0,t.Uk)("\n        "),i,(0,t.Uk)("\n            "),d,(0,t.Uk)("\n            "),g,(0,t.Uk)((0,p.zw)(n.k.date)+"\n        ",1),E,(0,t.Uk)("\n        "),y,(0,t.Uk)("\n            "),m,(0,t.Uk)((0,p.zw)(n.a.title),1),v,(0,t.Uk)("\n            "),q,(0,t.Uk)((0,p.zw)(n.a.time),1),B,(0,t.Uk)("\n            "),h,(0,t.Uk)((0,p.zw)(n.a.id),1),_,(0,t.Uk)("\n            "),f,(0,t.Uk)("\n                "+(0,p.zw)(n.a.contents)+"\n            ",1),w,(0,t.Uk)("\n        "),A,(0,t.Uk)("\n    "),U,(0,t.Uk)("\n"),b,(0,t.Uk)("\n")])])]),j,(0,t._)("p",null,[(0,t.Uk)("这个函数实际上显得比较复杂，如果有更好的办法，欢迎我交流。"),(0,t.Wm)(s,{to:"/contact.html"},{default:(0,t.w5)((()=>[(0,t.Uk)("联系")])),_:1})])])}var D=s(89);const C={},N=(0,D.Z)(C,[["render",x]]);var F=N}}]);
//# sourceMappingURL=317.160da86f.js.map