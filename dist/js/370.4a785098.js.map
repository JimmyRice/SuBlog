{"version":3,"file":"js/370.4a785098.js","mappings":"2KAAKA,MAAM,W,GAAXC,EAAAA,EAAAA,IAAA,gs/E,GAAqBC,G,kCAArBC,EAAAA,EAAAA,IAklBM,MAllBNC,EAAAC,E,aCCA,MAAMC,EAAS,CAAC,EAGVC,GAA2B,OAAgBD,EAAQ,CAAC,CAAC,SAASE,KAEpE,O","sources":["webpack://blog/./src/posts/Learning-Swift-1.vue","webpack://blog/./src/posts/Learning-Swift-1.vue?e4df"],"sourcesContent":["<template><div class=\"content\"><h1 class=\"post-title\">Swift 学习笔记（一）——A Swift Tour<a class=\"header-anchor\" id=\"Swift%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94A%20Swift%20Tour\" href=\"#Swift%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94A%20Swift%20Tour\">#</a></h1><div class=\"metabar\"><div class=\"metabar-item\">2023/11/19</div><div class=\"metabar-item\">代码</div><div class=\"metabar-item\">约 43 分钟读完</div></div>\n<p><em>A Swift Tour</em> 是 Swift 官方文档中的一篇用来浅略介绍 Swift 一些主要特性的文章。这样的一种 touring 往往能够让具有一定基础的学习者更快地了解到这个语言（或者框架）相对于其它语言有了什么样的区别和特性，同时也可以作为一种「前参考」，即通过阅读这样一篇文章，可以知道大体有怎样的工具，进而在有相关需求的时候知道参考这些工具的具体概念和定义。</p>\n<p>这篇文章不是对原文的中文翻译（官方中文翻译：<a href=\"https://gitbook.swiftgg.team/swift/\" class=\"external-link\" target=\"_blank\" rel=\"noopener noreferrer\">https://gitbook.swiftgg.team/swift/<span class=\"external-link-icon mdi mdi-launch\"></span></a>），其中掺杂了一些我个人的解读和想法。</p>\n<div class=\"notice tip\"><ol>\n<li>下面的「闲言」和「阅读笔记——About Swift」两节不算正文内容~</li>\n<li>本文中的内容仅仅是基于阅读 <em>A Swift Tour</em> 后的认知所编写，不保证在将来会发生一些改变。如果本文中存在一些纰漏，将在将来的笔记里进行修正。</li>\n</ol>\n</div>\n<h2>闲言<a class=\"header-anchor\" id=\"%E9%97%B2%E8%A8%80\" href=\"#%E9%97%B2%E8%A8%80\">#</a></h2>\n<blockquote>\n<p>It’s a safe, fast, and interactive programming language that combines the best in modern language thinking with wisdom from the wider Apple engineering culture and the diverse contributions from its open-source community.</p>\n</blockquote>\n<p>Swift 被 Apple 认为是具有 Apple 哲学的语言。我想，Apple 哲学的一些体现，抛开那些隐藏在生产线背后的不确定是利益、真正的责任感，还是二者杂糅的一些产物来说，大概最接近我的，是在一些明面上的事物，如实体设计——Apple 的一些产品的外观设计（总体），软件设计——macOS 系统本身的设计上。它追求一些细致和直观，但同时在可扩展性上又显得有些「极力追求独特」，当然有时也会做出迫不得已的让步（如 Apple Silicon 上的 Rosetta，Numbers Pages Keynotes 对 Microsoft 格式的支持）。</p>\n<p>我不清楚 Swift 是否可以算作是「有美感」，但它作为一门编程语言，本身就迈出了对于 Apple 来说可能很大的一步——开放（参考 <a href=\"https://www.swift.org/blog/swift-on-windows/\" class=\"external-link\" target=\"_blank\" rel=\"noopener noreferrer\">Introducing Swift on Windows<span class=\"external-link-icon mdi mdi-launch\"></span></a>）。</p>\n<p>而通过我对 Swift 这一浅浅的了解，大概可以（目前）推断出它确实解决了一些编写过程中的痛点。这也是我第一次在语言设计本身上见到类似于 hook 的东西（<code>willSet</code> 和 <code>didSet</code>），以及一些似乎没有在其它语言中见到的，符合直觉的 <code>extension</code>、<code>mutating func</code>。还有一些语法上的新颖，如当 enum type 是确定的时候，可以直接省略 enum name 用 <code>.case_name</code>。</p>\n<h2>阅读笔记——About Swift<a class=\"header-anchor\" id=\"%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94About%20Swift\" href=\"#%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94About%20Swift\">#</a></h2>\n<p><em>About Swift</em> 是对 Swift 的一个简单总述，但好像确实说出了很多花来。</p>\n<blockquote>\n<p>... combines the <strong>best</strong> in modern language thinking with wisdom from the wider Apple engineering culture ...\n... guiding principle that the obvious way to write your code should also perform the <strong>best</strong> ...</p>\n</blockquote>\n<p>其中最吸引我的就是上面的第二句话，一种认为好好写明确的代码就应该能得到好性能的 principle（不知道是不是这样）。除此之外还有一些</p>\n<ul>\n<li>Its combination of safety and speed make Swift an excellent choice for everything <strong>from “Hello, world!” to an entire operating system.</strong></li>\n<li>It’s an <strong>industrial-quality</strong> programming language that’s as expressive and enjoyable as a <strong>scripting language</strong>.</li>\n<li>The compiler is optimized for performance and the language is optimized for development, <strong>without compromising on either.</strong></li>\n</ul>\n<p>你最好是 ^_^</p>\n<h2>基本的数据类型、变量和字符串<a class=\"header-anchor\" id=\"%E5%9F%BA%E6%9C%AC%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E5%8F%98%E9%87%8F%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2\" href=\"#%E5%9F%BA%E6%9C%AC%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E5%8F%98%E9%87%8F%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2\">#</a></h2>\n<p>一个语言最基础的部分，无非</p>\n<ul>\n<li>如何去声明、定义变量和常量</li>\n<li>它们的数据类型如何被确定</li>\n<li>关于字符串</li>\n<li>一些 collection-like 类型</li>\n</ul>\n<h3>1. 变量和常量的定义、数据类型的指定</h3>\n<p>在 Swift 中，定义变量使用 <code>var</code>，定义常量使用 <code>let</code>。Swift 里这样的一种模式让人不禁联想到 JavaScript 中变量既可以用 <code>var</code> 又可以用 <code>let</code> 来声明、变量可以重定义以及 <code>var</code> 和 <code>let</code> 实际上控制的是变量的作用域的这些混乱且没有逻辑的表现显得无比诡异。</p>\n<div class=\"language-swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> implicitDouble <span class=\"token operator\">=</span> <span class=\"token number\">70.0</span>\n<span class=\"token keyword\">let</span> explicitFloat<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Float</span> <span class=\"token operator\">=</span> <span class=\"token number\">70</span>\n</code></pre></div>\n<p>默认情况下，带小数点的数字会被推断为双精度浮点型。</p>\n<h3>2. 类型转换</h3>\n<p>Swift 中没有隐式类型转换，保证了类型安全。其它的现代语言大都也都具有这样避免隐式类型转换的倾向，例如 Python。</p>\n<div class=\"language-plain\"><pre class=\"language-plain\"><code class=\"language-plain\">&gt;&gt;&gt; \"a\" + 1\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: can only concatenate str (not \"int\") to str\n</code></pre></div>\n<p><img src=\"https://z1.ax1x.com/2023/11/19/piNba38.png\" alt=\"\"></p>\n<p>强制类型转换可以通过创建实例来实现</p>\n<div class=\"language-swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> concatenation <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"Something magical will happen here: \"</span></span> <span class=\"token operator\">+</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<h3>3. 字符串</h3>\n<p>Swift 自带 <code>String</code> 类型，可以直接创建字符串 <code>\"String\"</code>。字符串的模板化使用的是 <code>\\(expression)</code> 的语法：</p>\n<div class=\"language-swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> scoreMessage <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"Your score is </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">score</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">.\"</span></span>\n<span class=\"token keyword\">let</span> costMessage <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"The cost is $</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">cost</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">.\"</span></span>\n</code></pre></div>\n<p>多行字符串使用的是三个<strong>双</strong>引号。</p>\n<div class=\"language-swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> heredoc <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"\"\"\nNot Indented\n    Indented\n\"\"\"</span></span>\n</code></pre></div>\n<p>注意后一个三引号。这个三引号可以理解为定义了一个缩进零点，与这个三引号缩进相同的文本被视为是没有缩进（0 缩进），缩进高于这个三引号的文本的缩进会被正常显示，缩进低于这三个引号将导致语法错误。</p>\n<blockquote>\n<p>Indentation at the start of each quoted line is removed, as long as it matches the indentation of the closing quotation marks.</p>\n</blockquote>\n<p><img src=\"https://z1.ax1x.com/2023/11/19/piNqUaR.png\" alt=\"\"></p>\n<p>上图中的 <code>quotation1</code> 和 <code>quotation2</code> 的值是等价的，可以注意到它们的缩进零点不同，由后一个三引号定义。</p>\n<p><code>quotation3</code> 中出现了 <code>Not Indented</code> 的缩进低于后一个三引号的状况，所以出现了 <code>Insufficient indentation of line in multi-line string literal</code> 的错误。</p>\n<p>下列代码</p>\n<div class=\"language-swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> quotation1 <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"\"\"\nNot Indented\n    Indented \n\"\"\"</span></span>\n\n<span class=\"token keyword\">let</span> quotation2 <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"\"\"\n    Not Indented\n        Indented\n    \"\"\"</span></span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>quotation1<span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>quotation2<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>结果为</p>\n<div class=\"language-plaintext\"><pre class=\"language-plaintext\"><code class=\"language-plaintext\">Not Indented\n    Indented \nNot Indented\n    Indented\n</code></pre></div>\n<div class=\"notice warning\"><p>放置在三引号里的双引号不需要转义。</p>\n</div>\n<h3>4. 数组、元组和词典</h3>\n<p>Swift 中的数组和词典均用方括号（brackets）来定义，其类型表示为 <code>[Type]</code> 和 <code>[KeyType: ValueType]</code>。</p>\n<div class=\"language-swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> numbers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> stringToNumberMap<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string-literal\"><span class=\"token string\">\"zero\"</span></span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-literal\"><span class=\"token string\">\"one\"</span></span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-literal\"><span class=\"token string\">\"two\"</span></span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-literal\"><span class=\"token string\">\"three\"</span></span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span>\n<span class=\"token punctuation\">]</span>\n</code></pre></div>\n<p>空数组用 <code>[]</code> 表示，空词典用 <code>[:]</code> 表示。空数组和空词典在赋给新定义的量时必须先指定其数据类型。对比上，TypeScript 若要正确推断类型，也有这样的要求但不严格，不指名的空数组会被直接推断为 <code>never[]</code> 类型；而 Java 则是在创建相关 Collection 类时需要用泛型来指代。</p>\n<div class=\"language-swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> numbers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n</code></pre></div>\n<div class=\"language-typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> numbers<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 不指明 number[]，空数组被推断为 never[]</span>\n</code></pre></div>\n<div class=\"language-java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Swift 中的元组（tuple）用途简单，即一次性多项传值和一次性多项返回。元组可以使用类似下标的数字来访问，例如</p>\n<div class=\"language-swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function-definition function\">getMinAndMax</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> numbers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> min <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">var</span> max <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> numbers <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> n <span class=\"token operator\">&gt;</span> max <span class=\"token punctuation\">{</span>\n            max <span class=\"token operator\">=</span> n\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> n <span class=\"token operator\">&lt;</span> min <span class=\"token punctuation\">{</span>\n            min <span class=\"token operator\">=</span> n\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token function\">getMinAndMax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 或者 result.min</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 或者 result.max</span>\n</code></pre></div>\n<h2>循环、控制流<a class=\"header-anchor\" id=\"%E5%BE%AA%E7%8E%AF%E3%80%81%E6%8E%A7%E5%88%B6%E6%B5%81\" href=\"#%E5%BE%AA%E7%8E%AF%E3%80%81%E6%8E%A7%E5%88%B6%E6%B5%81\">#</a></h2>\n<h3>1. <code>if</code> 语句</h3>\n<p>通常而言 <code>if</code> 后面的条件需要用括号括起来，而且这样的条件会被隐式转换为布尔值，例如 <code>if 0</code> 就是 <code>if false</code>。然而，在 Swift 中，<code>if</code> 有这样的特性：</p>\n<ul>\n<li>当条件只包含一个表达式时，括号就可以省略</li>\n<li>条件不会进行隐式转换，所以 <code>if</code> 后面必须是布尔值的表达式</li>\n</ul>\n<p>Swift 中的 if-else 同时也扮演着其他语言中的三目运算符的角色，这一点和 Python 相似。</p>\n<div class=\"language-swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Score: </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">score</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\"> </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\"><span class=\"token keyword\">if</span> score <span class=\"token operator\">&gt;</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">{</span> '🎉' <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> '' <span class=\"token punctuation\">}</span></span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>Python 中的相关语法则更像是一种倒装的语序。</p>\n<div class=\"language-python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Score: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>score<span class=\"token punctuation\">:</span><span class=\"token format-spec\">d</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token string\">'🎉'</span> <span class=\"token keyword\">if</span> score <span class=\"token operator\">&gt;</span> <span class=\"token number\">10</span> <span class=\"token keyword\">else</span> <span class=\"token string\">''</span><span class=\"token punctuation\">:</span><span class=\"token format-spec\">s</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<h3>2. Optional 量（Optionals）</h3>\n<p>Optional 可以简单理解为 TypeScript 中的 <code>type | null</code> 联合类型，即要么是相应的值，要么是 <code>null</code>（在 Swift 中是 <code>nil</code>）。Optional 和 <code>if</code> 搭配起来可以形成一种特殊语法 if-let。</p>\n<div class=\"language-swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> optionalValue <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 当 optionalValue 可以被展开的时候（optionalValue 不是 nil）执行</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 当 optionalValue 是 nil 的时候执行</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>上面的语法也可以简写为 <code>if let optionalValue {}</code>，此时花括号内可使用的变量是经过展开后的 <code>optionalValue</code>。</p>\n<div class=\"notice tip\"><p>文档里对于一个非 <code>nil</code> 的 Optional 值被正确作为原类型使用的情况，存在一种对 Optional 量「展开」（unwrap）的描述。我想这也是 Swift 相对其他语言的一种不同之处。在这里，可以将 optional 值 <code>T?</code> 理解为一种特殊的泛型 <code>Optional&lt;T&gt;</code>，它决定了具有该泛型的表达式在具体被取值时候的返回具有两种可能性，这种在取值时对原值或是 <code>nil</code> 的内部选择就是 unwrap 的过程。</p>\n<blockquote>\n<p>If the optional value is <code>nil</code>, the conditional is false and the code in braces is skipped. Otherwise, the optional value is <strong>unwrapped</strong> and assigned to the constant after let, which makes the unwrapped value available inside the block of code.</p>\n</blockquote>\n</div>\n<p>Swift 中存在空合并运算符（null coalescing operator）双问号 <code>??</code>。这是对 optional 量的另一种处理方法：<code>optionalValue ?? defaultValue</code>。</p>\n<p>在这里就不得不提 <code>null</code> 这样的一个值了。在其它某些语言中的 <code>null</code> 可以被直接赋给几乎任何类型的值，也可以作为一些类型值的默认值，这种缺省机制在有些时候被语言本身采用。这种 <code>null</code> 的广泛存在导致了一些代码中<em>几乎所有</em>变量的存在不具有保证，产生许多额外的判断。注意这里的问题集中在<em>所有</em>上面。</p>\n<p>从这个角度来看，JavaScript 这种同时具有 <code>null</code> 和一个叫 <code>undefined</code> 的值的动态类型语言在这方面的代码简洁性和可维护性甚至会表现得更糟糕。在 TypeScript 中，由于值可以被作为一种不变的 literal type，在有些代码中会存在 <code>T | null</code>、<code>?: T</code> 和 <code>T | undefined</code> 甚至 <code>T | undefined | null</code> 等多种含义不定写法，但它们最终表达的大概依然只是可选值。当然不排除在一些模式下，<code>null</code> 和 <code>undefined</code> 会被明确区分且具有明确的含义。</p>\n<h3>3. <code>switch</code> 语句</h3>\n<p>文档中对 <code>switch</code> 语句的描述是</p>\n<blockquote>\n<p>Switches support any kind of data and a wide variety of comparison operations — they aren’t limited to integers and <strong>tests for equality.</strong></p>\n</blockquote>\n<p>而通常情况下 <code>switch</code> 仅能被用于相等性的检查。上面所说的特殊用法，来源于一种特殊的 <code>switch-where</code> 写法。下面的这段代码的结构来自官方的文档</p>\n<div class=\"language-swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> vegetable <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"红辣椒\"</span></span>\n<span class=\"token keyword\">switch</span> vegetable <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string-literal\"><span class=\"token string\">\"celery\"</span></span><span class=\"token punctuation\">:</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"加点葡萄干就能做出蚂蚁爬在树干上的效果了\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string-literal\"><span class=\"token string\">\"cucumber\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"watercress\"</span></span><span class=\"token punctuation\">:</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"可以做出好吃的沙拉捏\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> <span class=\"token keyword\">let</span> x <span class=\"token keyword\">where</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">hasSuffix</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"椒\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"这</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">x</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">辣吗？\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"放汤里应该都好喝\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 输出“这红辣椒辣吗？”</span>\n</code></pre></div>\n<p>其中可以看出这么几点：</p>\n<ul>\n<li>case-let 语句可用于拦截变量，并将拦截到的变量用于后面紧跟着的 <code>where</code> 条件中。这里将 <code>case</code> 后的表达式广泛化了，一般的 <code>case x</code> 是一个特例 <code>case let a where a == x</code>。</li>\n<li>case 结尾不需要写 <code>break</code>，但也可以写。做出这样的改动的基础应该是将跨 case 执行语句视为一种错误，所以这种操作直接被抛弃了。</li>\n<li>多项同时 case 用 <code>,</code> 分隔。</li>\n</ul>\n<p>另外还有一点是这里的 <code>switch</code> 必须有 <code>default</code> 语句，否则会报错 <code>Switch must be exhaustive</code>（Switch 的情况必须全面）。如果需要跳过 <code>default</code> 情况，则应写作 <code>default: break</code>。</p>\n<div class=\"notice warning\"><p>想问问你们 Swift 人为什么在 Swift 里面 switch-case 的一般写法（Swift 文档和 Swift Playground 里的表现）中认为 <code>case</code> 前面应当没有缩进？😨😨</p>\n</div>\n<h3>4. <code>for</code> 和 <code>while</code> 语句</h3>\n<p>for-in 可以用来遍历数组和词典。其中词典使用 <code>for (key, value) in dictionary {}</code> 的写法，对于不需要的值则使用 <code>_</code> 代表缺省。下面是官方给出的一种从 <code>[String: [Int]]</code> 词典中提取出数组中全部数字的最大值的算法。</p>\n<div class=\"language-swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> interestingNumbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string-literal\"><span class=\"token string\">\"Prime\"</span></span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-literal\"><span class=\"token string\">\"Fibonacci\"</span></span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-literal\"><span class=\"token string\">\"Square\"</span></span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">var</span> largest <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span><span class=\"token punctuation\">,</span> numbers<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> interestingNumbers <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> number <span class=\"token keyword\">in</span> numbers <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> number <span class=\"token operator\">&gt;</span> largest <span class=\"token punctuation\">{</span>\n            largest <span class=\"token operator\">=</span> number\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>largest<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// prints 25</span>\n</code></pre></div>\n<p>对于 <code>while</code>，Swift 中仍然有 while 和 do-while 的区分，只不过后者改名叫做 repeat-while。和 <code>if</code> 一样，一个表达式的条件可以简写。</p>\n<p>此处还存在一种特殊的表达式 <code>m..&lt;n</code> 和 <code>m...n</code>，其中 <code>m</code> 和 <code>n</code> 为整数。这类似于 Python 中的 <code>range(n)</code>。<code>m..&lt;n</code> 产生的是 <code>m, m+1, ..., n-1</code> 一共 n-m 个数，<code>m...n</code> 产生的是 <code>m, m+1, ..., n</code> 一共 n-m+1 个数。这种表达式应该是用于替代通常的 <code>for (int i = 0; i &lt; ...; i++)</code> 写法，从而全部换成 for-in 来解决。Swift 在这一点的设计上和 Python 有着异曲同工之妙。</p>\n<div class=\"language-swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token operator\">..&lt;</span>array<span class=\"token punctuation\">.</span>count <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>依然和 Python 相似，<code>i</code> 在不需要的时候可以替换成 <code>_</code>。</p>\n<h3>5. 闭包和函数</h3>\n<p>Swift 显式地支持闭包，其文档中强调了函数可以被视为是一种可调用的闭包。在这种情况下，函数也会被视作是一种头等函数（它可以在不同的函数之间交换，可以被传递、被返回等）。</p>\n<blockquote>\n<p>Functions are a first-class type. This means that a function can return another function as its value. A function can take another function as one of its arguments.</p>\n</blockquote>\n<p>通常支持闭包的语言都存在头等函数的概念，这一点可以参照 Wikipedia 上的一些说法</p>\n<ul>\n<li><em><strong>Closure</strong> is a technique for implementing lexically scoped name binding in a language <u>with first-class functions.</u></em></li>\n<li><em>The use of closures is associated with languages <u>where functions are first-class objects</u>, in which functions can be returned as results from higher-order functions, or passed as arguments to other function calls; if functions with free variables are first-class, then returning one creates a closure.</em></li>\n<li><em>Closures typically appear in languages with <u>first-class functions</u>—in other words, such languages enable functions to be passed as arguments, returned from function calls, bound to variable names, etc., just like simpler types such as strings and integers.</em></li>\n</ul>\n<p>在这里可以简单区分一下函数和闭包。对于闭包，它所捕捉到的自由变量（captured, free variables），当闭包处于其它作用域时也可以正常使用。例如 JavaScript 中：</p>\n<div class=\"language-javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">removeFromArray</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array<span class=\"token punctuation\">,</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=&gt;</span> x <span class=\"token operator\">===</span> number<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>这里存在的闭包是 lambda 表达式 <code>x =&gt; x === number</code> 所创建的匿名函数（anonymous function），它被传递给 <code>array</code> 自带的 <code>filter</code> 方法并被反复调用。值得注意的是这里的 <code>number</code> 作为实参存在于函数 <code>removeFromArray</code> 的作用域，其被闭包所捕捉后则可以传递到外部去继续使用。</p>\n<p>一个更明确的例子是使用函数来构造函数。</p>\n<div class=\"language-javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">f<span class=\"token punctuation\">,</span> dx</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> dx <span class=\"token operator\">-</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> dx<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>这里 <code>d(f, dx)</code> 所返回的是一个由 <code>f</code> 和 <code>dx</code> 参与构成的闭包。</p>\n<div class=\"language-javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 构造新的闭包</span>\n\n<span class=\"token keyword\">var</span> func <span class=\"token operator\">=</span> <span class=\"token function\">d</span><span class=\"token punctuation\">(</span>f1<span class=\"token punctuation\">,</span> dx1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 在某个 f1 和 dx1 都不存在的作用域内</span>\n\n<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;-- 返回的结果和在 f1 和 dx1 存在的作用域内 (f1(2) + dx1 - f1(2)) / dx1 的结果一致</span>\n</code></pre></div>\n<p>闭包在不同的语言之中，可能直接由函数定义来生成，也可能用 lambda 表达式来生成，其与函数实质上不一定是并列的关系。</p>\n<p>在 Swift 里面，闭包是由花括号括起来的一段代码，其参数由花括号开头的参数列表指定。这一参数列表和函数声明中的相似。参数列表和闭包体之间用 <code>in</code> 分开。</p>\n<div class=\"language-swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token class-name\">Int</span> <span class=\"token keyword\">in</span> \n<span class=\"token comment\">// do something with number</span>\n<span class=\"token keyword\">return</span> <span class=\"token comment\">// some int</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>在一些情况下参数列表可以省略，例如当回调被用于作为回调函数时，其参数和返回值的类型实际上已经确定，此时就可以省略掉类型的注明。</p>\n<div class=\"language-swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token punctuation\">{</span> number <span class=\"token keyword\">in</span>\n<span class=\"token comment\">// do something with number</span>\n<span class=\"token keyword\">return</span> <span class=\"token comment\">// some int</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>若其返回值可以在一个表达式里得到，则可以直接简写为</p>\n<div class=\"language-swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token punctuation\">{</span> number <span class=\"token keyword\">in</span> expression <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>这一点类似于 JavaScript 中的箭头函数 <code>x =&gt; expression</code> 和 <code>x =&gt; { /* do something */ return }</code>。</p>\n<p>当参数列表数量和类型都确定时，上述表示还可以进一步简化为用数字代表指定位置的参数所执行的表达式的结果。例如</p>\n<div class=\"language-swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> x3numbers <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token short-argument\">$0</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p><code>$0</code> 表示第一个参数。</p>\n<p>在 Swift 中，函数的声明使用 <code>func</code>。</p>\n<div class=\"language-swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function-definition function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token class-name\">Int</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function-definition function\">makeIncrementer</span><span class=\"token punctuation\">(</span>step<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">add</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> step <span class=\"token operator\">+</span> number\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> add\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>函数的每一个参数具有一个标签（label），这点和 Python 很相似，但在 Swift 中当标签存在时，其在传值时必须带上。参数的标签默认与名称相同，也可以通过在参数前加上 <code>_</code> 来删除标签达到顺序化的效果，或者加上其它词语来更改标签。</p>\n<div class=\"language-swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function-definition function\">makeIncrementer</span><span class=\"token punctuation\">(</span>s step<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">add</span><span class=\"token punctuation\">(</span>n number<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> step <span class=\"token operator\">+</span> number\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> add\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> incrementer1 <span class=\"token operator\">=</span> <span class=\"token function\">makeIncrementer</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 6</span>\n</code></pre></div>\n<h2>类和对象<a class=\"header-anchor\" id=\"%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1\" href=\"#%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1\">#</a></h2>\n<h3>1. 类的简单性质</h3>\n<ul>\n<li>类的属性可以使用 <code>let</code>、<code>var</code> 声明，方法可以使用 <code>func</code> 声明。</li>\n<li>类可以有构造函数也可以没有。构造函数不写 <code>func</code>，而直接写作 <code>init(...) {}</code>。</li>\n<li>在类中，使用 <code>self</code> 来代指当前实例本身，使用 <code>super</code> 来代指继承的对象，<code>super.init</code> 是继承的对象的构造函数。</li>\n<li>类的继承不使用 <code>extend</code> 而是 <code>class ClassB: ClassA</code> 这样的表达。</li>\n</ul>\n<h3>2. 方法重载</h3>\n<p>Swift 支持类似于 Java 中 <code>@Override</code> 的方法重载，用法是直接声明 <code>override func</code>。无效重载将导致编译错误。</p>\n<h3>3. 属性的 getter 和 setter</h3>\n<p>除了对属性的一般定义，即类似于 <code>let a = 1</code> 这样的定义以外，还可以进行拓展的 get/set 定义。</p>\n<div class=\"language-swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">EquilateralTriangle</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> sideLength<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span>\n\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>sideLength<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>sideLength <span class=\"token operator\">=</span> sideLength\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">var</span> perimeter<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">3.0</span> <span class=\"token operator\">*</span> sideLength\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">set</span> <span class=\"token punctuation\">{</span>\n            sideLength <span class=\"token operator\">=</span> newValue <span class=\"token operator\">/</span> <span class=\"token number\">3.0</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>这样一来，<code>perimeter</code> 的值将与 <code>sideLength</code> 产生直接的关联，且当 <code>perimeter</code> 改变时也会带动 <code>sideLength</code> 发生改变。Setter 函数的参数为新的值，当不写该参数时，新的值默认名称为 <code>newValue</code>。</p>\n<h3>4. 属性的 <code>willSet</code> 和 <code>didSet</code></h3>\n<p><code>willSet</code> 中的代码将会在属性的值被设定之前被执行，<code>didSet</code> 则是在设定之后。这一「设定」的操作不包括在 <code>init</code> 函数里进行的操作。这两个 hook 可以被用于执行一些同步的操作，但不宜出现使用很长或者重复的多值比较来确定一个值的情况。</p>\n<div class=\"language-swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> a<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">willSet</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>newValue<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>5. 类的 Optional 类型和 optional 访问</h3>\n<p>类的类型后也可以加上 <code>?</code> 来表示该类不一定能被正常实例化。</p>\n<div class=\"language-swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> optionalInstance<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Class</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>optionalInstance<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>someProperty<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>第二行中的 optional 访问，使得当 <code>optionalInstance</code> 确实为 <code>nil</code> 时，该表达式的值也为 <code>nil</code> 而不会抛出错误。</p>\n<h3>6. 枚举</h3>\n<p>枚举可以有类型，也可以没有。若枚举具有类型，则必须是 <code>Int</code>、浮点和 <code>String</code> 之一，其余类型不能使用。</p>\n<div class=\"language-swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Months</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token class-name\">January</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">case</span> <span class=\"token class-name\">Febrary</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">March</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">April</span> <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>枚举的项用 <code>case</code> 来指定，对于有类型的枚举，每一项都具有一个原始值（<code>rawValue</code>）。当枚举类型是 <code>Int</code> 时，原始值会从第一个项开始，从 0 一直递增。当手动指定了某一项的值时，该项的原始值即为指定的值，而下一项的值为指定的值的下一个值。</p>\n<p>然而，当枚举类型是浮点时，默认情况下仍然是从 0.0 一直递增，但是当存在人工指定的值时，递增的规则不再适用，所有的项目均需要被人工指定值。</p>\n<p>当枚举的类型是字符串时，其原始值为该项的名称，如 <code>Months.January</code> 的 <code>rawValue</code> 就是 <code>\"January\"</code>。</p>\n<p>枚举内部也可以有方法，且当枚举类型确定时，不需要带上枚举的名称，直接写作 <code>.</code> 后跟上枚举项的名字即可。</p>\n<div class=\"language-swift\"><pre class=\"language-swift\"><code class=\"language-swift\">\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">Months</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token class-name\">January</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">case</span> <span class=\"token class-name\">Febrary</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">March</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">April</span> <span class=\"token comment\">// ...</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">toChinese</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token keyword\">self</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token class-name\">January</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token string-literal\"><span class=\"token string\">\"一月\"</span></span>\n            <span class=\"token comment\">// ...</span>\n            <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>rawValue<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div>\n<p>通常情况下对枚举的使用是作为常量，如 <code>Months.January</code>。但枚举也可以被实例化，其自带一个返回值为 optional 的构造函数，接受一个 <code>rawValue</code> 参数。例如下列语句：</p>\n<div class=\"language-swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> wtf <span class=\"token operator\">=</span> <span class=\"token class-name\">Months</span><span class=\"token punctuation\">(</span>rawValue<span class=\"token punctuation\">:</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Oh no...</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"So what are you thinking?\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>else</code> 中的语句被执行。以及</p>\n<div class=\"language-swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> january <span class=\"token operator\">=</span> <span class=\"token class-name\">Months</span><span class=\"token punctuation\">(</span>rawValue<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>january<span class=\"token punctuation\">.</span><span class=\"token function\">toChinese</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Uh...\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 输出 一月</span>\n</code></pre></div>\n<p>枚举项亦可以有自己的参数，这在枚举的实例化中表现出一定的作用来。例如下面的 <code>ServerResponse</code> 枚举。</p>\n<div class=\"language-swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">ServerResponse</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> <span class=\"token function\">failure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">switch</span> result <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token keyword\">let</span> <span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">// use a and b here.</span>\n    <span class=\"token keyword\">case</span> <span class=\"token keyword\">let</span> <span class=\"token punctuation\">.</span><span class=\"token function\">failure</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Failed. Message: </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">msg</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>在这里 <code>ServerResponse</code> 仍然可以省略，且 <code>case let</code> 实际上向后面的代码传递的是「存在」于当前枚举项中的参数。</p>\n<h3>7. 结构体</h3>\n<p>结构体类似于类，可以拥有构造函数、属性、方法等。一个区别是，结构体的实例可以被形容为是「静态」的（相对于类的实例），其传递的是一种拷贝，而类的实例在传递时表现为引用。同时，结构体还有这样的特性</p>\n<ul>\n<li>结构体之间不存在继承</li>\n<li>结构体没有反构造函数（deinitializer）</li>\n<li>当结构体被赋给常量时，其变量属性亦不可变</li>\n</ul>\n<p>根据上述特性，结构体可以理解为是一种主要用于携带静态数据，并可能带有不牵涉外部数据的一些方法的对象。例如，注册信息可以用结构体这样表示：</p>\n<div class=\"language-swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Level</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> starter <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">case</span> two<span class=\"token punctuation\">,</span> three<span class=\"token punctuation\">,</span> four<span class=\"token punctuation\">,</span> five<span class=\"token punctuation\">,</span> six\n    <span class=\"token keyword\">case</span> ultimate\n\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">getDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token keyword\">self</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>starter<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token string-literal\"><span class=\"token string\">\"Newbie\"</span></span>\n            <span class=\"token comment\">// ...</span>\n            <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token string-literal\"><span class=\"token string\">\"Level </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\"><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>rawValue</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">RegistrationInformation</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> username<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n    <span class=\"token keyword\">var</span> password<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n    <span class=\"token keyword\">var</span> email<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n    <span class=\"token keyword\">var</span> level<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Level</span>\n\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> initialLevel<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>username <span class=\"token operator\">=</span> username\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>password <span class=\"token operator\">=</span> password\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>email <span class=\"token operator\">=</span> email\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>level <span class=\"token operator\">=</span> <span class=\"token class-name\">Level</span><span class=\"token punctuation\">(</span>rawValue<span class=\"token punctuation\">:</span> initialLevel<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">getLevelDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>level<span class=\"token punctuation\">.</span><span class=\"token function\">getDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> information <span class=\"token operator\">=</span> <span class=\"token class-name\">RegistrationInformation</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">:</span> username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">:</span> password<span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">:</span> email<span class=\"token punctuation\">,</span> initialLevel<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>information<span class=\"token punctuation\">.</span><span class=\"token function\">getLevelDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>此外，默认情况下一个结构体的方法不能直接修改其本身的变量属性。如果需要这样的方法，需要在 <code>func</code> 前显式地写上 <code>mutating</code>。</p>\n<h2>异步<a class=\"header-anchor\" id=\"%E5%BC%82%E6%AD%A5\" href=\"#%E5%BC%82%E6%AD%A5\">#</a></h2>\n<div class=\"notice tip\"><p>作为 Tour 的内容，此部分所写的较为粗略。</p>\n</div>\n<p>和其它支持现代化对异步操作处理的语言一样，Swift 支持 async-await 模式。对这两个关键字的使用，也有如下常见的限制：</p>\n<ul>\n<li><code>await</code> 只能在被标记为 <code>async</code> 的函数中使用（有一项例外）</li>\n<li><code>await</code> 只能对被标记为 <code>async</code> 的函数使用</li>\n</ul>\n<p>若要定义一个异步函数，使用 <code>func K(...) async -&gt; T</code> 的语法。使用它时，在对它的调用之前加上 <code>await</code> 即可。此外，Swift 还支持一种 <code>let async</code> 的写法。这种写法可以使一些异步操作并行执行后取值，使用这些值时再在量前加上 <code>await</code>。</p>\n<blockquote>\n<p>Use <code>async let</code> to call an asynchronous function, letting it run in parallel with other asynchronous code. When you use the value it returns, write await.</p>\n</blockquote>\n<div class=\"language-swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function-definition function\">connectUser</span><span class=\"token punctuation\">(</span>to server<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">let</span> userID <span class=\"token operator\">=</span> <span class=\"token function\">fetchUserID</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">:</span> server<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">let</span> username <span class=\"token operator\">=</span> <span class=\"token function\">fetchUsername</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">:</span> server<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> greeting <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token string-literal\"><span class=\"token string\">\"Hello </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">username</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">, user ID </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">userID</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>greeting<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Task</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">connectUser</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"default\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Swift 还提出了一种新的处理并发的模式，即 Actor 结构。将在后面的笔记中继续研究。</p>\n<h2>协议和拓展<a class=\"header-anchor\" id=\"%E5%8D%8F%E8%AE%AE%E5%92%8C%E6%8B%93%E5%B1%95\" href=\"#%E5%8D%8F%E8%AE%AE%E5%92%8C%E6%8B%93%E5%B1%95\">#</a></h2>\n<h3>1. 协议</h3>\n<p>相比于 Java 中的 Abstract Class 和 Interface，Protocol 的模式能够更好（且更整齐）地反映「接受协议」、「接受约束」、「保持一致」的这种代码需求。同时，在 Protocol 中所声明的方法若需对目标的结构自身的属性进行修改，其前也要求显式地加上 <code>mutating</code>。</p>\n<div class=\"language-swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">protocol</span> <span class=\"token class-name\">Example</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> variableProperty<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n    <span class=\"token keyword\">mutating</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">modify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>协议可以被 Class、Enum、Struct 甚至类型（见下面的「拓展」）接受。Struct 内的 mutating function 前的 <code>mutating</code> 不能省略，而 Class 则不需要写 <code>mutating</code>，这是因为类本身就可以修改自身的变量属性。</p>\n<h3>2. 拓展</h3>\n<p>拓展（Extension）所针对的是 Swift 中的类型，这一概念使得类型也可以变得有无限可能。在拓展的过程中，也可以让类型去接收协议。一个很好理解的例子是为所有的 <code>Int</code> 加上绝对值的方法。</p>\n<div class=\"language-swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">extension</span> <span class=\"token class-name\">Int</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">absv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token class-name\">Int</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">absv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>拓展中引入的方法也可以修改值本身（用 <code>self</code> 表示），这样的方法前面同样要加上 <code>mutating</code>。此外在这里需要注意的一点是 <code>.</code> 的优先级要高于 <code>-</code>，<code>-2.absv()</code> 的结果是 <code>-2</code>。</p>\n<h2>异常处理<a class=\"header-anchor\" id=\"%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86\" href=\"#%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86\">#</a></h2>\n<h3>1. Error 协议</h3>\n<p>Swift 语言内置了一种 Error 协议（实际上这个协议是空的）。根据前文，多种结构可以接受 Error 协议；接受了 Error 协议以后就可以被用来表示一个异常。例如下面的 Enum 就可以用来表示异常。</p>\n<div class=\"language-swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">HttpError</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Error</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token class-name\">NotFound</span>\n    <span class=\"token keyword\">case</span> <span class=\"token class-name\">InternalError</span>\n    <span class=\"token keyword\">case</span> <span class=\"token class-name\">Forbidden</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>而实际上既然类型也可以通过 Extension 接受协议，甚至可以做出这样的效果来：</p>\n<div class=\"language-swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">extension</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Error</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">getError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token keyword\">self</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string-literal\"><span class=\"token string\">\"ErrorNameRepresentedByNumberOne\"</span></span>\n            <span class=\"token comment\">// ...</span>\n        <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string-literal\"><span class=\"token string\">\"Error</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\"><span class=\"token keyword\">self</span></span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function-definition function\">throwSomeError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token function\">throwSomeError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token keyword\">let</span> number <span class=\"token keyword\">as</span> <span class=\"token class-name\">Int</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"I am the number </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">number</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\"> and represent the error </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">number<span class=\"token punctuation\">.</span><span class=\"token function\">getError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 输出 I am the number 2 and represent the error Error2</span>\n</code></pre></div>\n<h3>2. do-catch 语句</h3>\n<p>与其他语言 try-catch 不同，Swift 中的 try 关键字在 do 中被使用，且只会作用于部分语句（表达式），而非 try-catch 中的所有语句。例如</p>\n<div class=\"language-swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Trying to retrieve a response\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> someResponse <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>someResponse<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>当 <code>doSomething</code> 抛出异常时，就会跳转至下面的 <code>catch</code> 中继续执行，且错误的默认名称是 <code>error</code>。除了什么也不带的 <code>catch</code> 以外，还有下面几种形式</p>\n<ul>\n<li><code>catch EnumCase {}</code>，使得后面的 block 中的内容仅在捕捉到 <code>EnumCase</code> 的枚举类型错误时执行</li>\n<li><code>catch let x as Type {}</code>，使得后面的 block 中的内容仅在捕捉到 <code>Type</code> 类型的量 <code>x</code> 时执行，且 <code>x</code> 可以在 block 中被使用。上面的一小节中的代码段就用到了它。</li>\n<li><code>catch is Type</code>，使得后面的 block 中的内容仅在捕捉到 <code>Type</code> 类型的错误时执行；这一点在文档中并没有提到。需要注意的是它和 <code>catch EnumCase</code> 的区别，<code>is</code> 后跟的必须是类型，例如枚举类型，但不能跟具体的枚举项。</li>\n</ul>\n<h3>3. <code>try?</code> 语句</h3>\n<p><code>try?</code> 可以在 do-catch 外使用，它将一个表达式的值变成一个 Optional，当语句执行成功时 unwrap，throw 时为 <code>nil</code>。</p>\n<h3>4. <code>defer</code> 关键字</h3>\n<p>其实我并不清楚为什么要在这里介绍 <code>defer</code>，也许是因为它在异常抛出时的表现有一些特殊性吧。<code>defer</code> 后跟的是一段 block，在函数中使用，代表这段 block 会在函数结束执行（正常结束、return 或者 throw）时执行。所以 Swift 中的函数也可以拥有自己的「初始化」和「反初始化」代码，为了可读性可以将它们写在一起，初始化代码写在 <code>defer</code> 外面，反初始化写在 <code>defer</code> 里面，并放在函数代码的最开头。</p>\n<p>下面是文档中给出的一个例子：</p>\n<div class=\"language-swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> fridgeIsOpen <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n<span class=\"token keyword\">let</span> fridgeContent <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"milk\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"eggs\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"leftovers\"</span></span><span class=\"token punctuation\">]</span>\n\n\n<span class=\"token keyword\">func</span> <span class=\"token function-definition function\">fridgeContains</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> food<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token class-name\">Bool</span> <span class=\"token punctuation\">{</span>\n    fridgeIsOpen <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token keyword\">defer</span> <span class=\"token punctuation\">{</span>\n        fridgeIsOpen <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> fridgeContent<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>food<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> result\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> <span class=\"token function\">fridgeContains</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"banana\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Found a banana\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>fridgeIsOpen<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Prints \"false\"</span>\n</code></pre></div>\n<p>这是因为在现实意义上，操作 <code>frigeContains</code> 时必须要对 <code>fridgeIsOpen</code> 产生一种对称的修改，即从 <code>false</code> 到 <code>true</code> 再到 <code>false</code> 的改变。这一点在抽象意义上也可以被利用。我能够想象到的是在异步操作中根据对象的状态进行正确的处理，这种状态的变换如果具有一定的对称性，就可以通过上面的代码的类似逻辑来实现。</p>\n<h2>泛型<a class=\"header-anchor\" id=\"%E6%B3%9B%E5%9E%8B\" href=\"#%E6%B3%9B%E5%9E%8B\">#</a></h2>\n<h3>1. 函数泛型</h3>\n<p>和有些语言一样，函数中的泛型写在参数列表前，用 <code>&lt;&gt;</code> 包含。</p>\n<div class=\"language-swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function-definition function\">makeArray</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Item</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>repeating item<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">,</span> numberOfTimes<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Item</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> result<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Item</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> <span class=\"token omit keyword\">_</span> <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token operator\">..&lt;</span>numberOfTimes <span class=\"token punctuation\">{</span>\n         result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">makeArray</span><span class=\"token punctuation\">(</span>repeating<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"knock\"</span></span><span class=\"token punctuation\">,</span> numberOfTimes<span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 结果是 [\"knock\", \"knock\", \"knock\", \"knock\"]</span>\n</code></pre></div>\n<p>上面的代码所用到泛型的地方是 <code>var result</code> 的空数组定义，以及对返回值的标注。</p>\n<h3>2. 泛型作为参数</h3>\n<p>若要将泛型用于类型的参数，是将其写在类型后，用 <code>&lt;&gt;</code> 包含。例如 Swift 标准库中的 Optional 类型可以这样实现：</p>\n<div class=\"language-swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">OptionalValue</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Wrapped</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token keyword\">none</span>\n    <span class=\"token keyword\">case</span> <span class=\"token keyword\">some</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Wrapped</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 注意这里 some 括号里标注的不是形参名而是形参类型</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>3. 泛型条件</h3>\n<p>Swift 不仅支持了泛型，同时也在语言设计上支持了对泛型使用条件的约束。借助 <code>where</code> 可以直接声明一些泛型的适用条件，这使得一些确实需要的限制可以在编译阶段被明确表达，而不需要在运行时进行额外的检查，甚至对语言的底层进行一些操作。</p>\n<p><code>where</code> 语句放在函数声明的最后，返回值类型的后面，格式是 <code>where 条件1, 条件2, ...</code>。例如：</p>\n<div class=\"language-swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function-definition function\">equal</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">B</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token class-name\">Bool</span> <span class=\"token keyword\">where</span> <span class=\"token class-name\">A</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">==</span> b\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>上面的 <code>equal</code> 函数要求输入的 <code>A</code> 和 <code>B</code> 两种类型必须相等，它排除了一些类似于「跨类型进行相等性比较」的不必要操作。除了类型之间的 <code>==</code> 关系，还可以用 <code>:</code> 来指定对特定 protocol 的接受情况以及类的继承情况。文档中给出的例子为</p>\n<div class=\"language-swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function-definition function\">anyCommonElements</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Sequence</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">U</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Sequence</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> lhs<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token omit keyword\">_</span> rhs<span class=\"token punctuation\">:</span> <span class=\"token class-name\">U</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token class-name\">Bool</span>\n    <span class=\"token keyword\">where</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Element</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Equatable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Element</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">U</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Element</span>\n</code></pre></div>\n<p>其中 <code>where</code> 后给出的限制条件的意思是 <code>T.Element</code> 必须接受 <code>Equatable</code> 协议，且 <code>T.Element</code> 和 <code>U.Element</code> 类型相同。此外，<code>&lt;T: Sequence, U: Sequence&gt;</code> 的写法等价于 <code>&lt;T, U&gt; ... where T: Sequence, U: Sequence</code>。</p>\n</div></template>","import { render } from \"./Learning-Swift-1.vue?vue&type=template&id=13ef8f21\"\nconst script = {}\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["class","_createStaticVNode","_hoisted_2","_createElementBlock","_hoisted_1","_hoisted_201","script","__exports__","render"],"sourceRoot":""}