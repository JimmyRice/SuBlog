{"version":3,"file":"js/317.160da86f.js","mappings":"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","sources":["webpack://blog/./src/posts/Array-Date-and-Category.vue","webpack://blog/./src/posts/Array-Date-and-Category.vue?1d4c"],"sourcesContent":["<template><div class=\"content\"><h1 class=\"post-title\">对于包含日期数组的处理<a class=\"header-anchor\" id=\"%E5%AF%B9%E4%BA%8E%E5%8C%85%E5%90%AB%E6%97%A5%E6%9C%9F%E6%95%B0%E7%BB%84%E7%9A%84%E5%A4%84%E7%90%86\" href=\"#%E5%AF%B9%E4%BA%8E%E5%8C%85%E5%90%AB%E6%97%A5%E6%9C%9F%E6%95%B0%E7%BB%84%E7%9A%84%E5%A4%84%E7%90%86\">#</a></h1><div class=\"metabar\"><div class=\"metabar-item\">2020/04/24</div><div class=\"metabar-item\">代码</div><div class=\"metabar-item\">约 9 分钟读完</div></div>\n<p>由于最近业余开发了一个时间轴的程序（但这个程序的主体不是时间轴），将不同的事件按照时间点记录下来，并仿照 <a href=\"https://www.githubstatus.com/\" class=\"external-link\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.githubstatus.com/<span class=\"external-link-icon mdi mdi-launch\"></span></a> 的样式从上到下排列下来。由于是第一次做这方面的东西，遇到了很多问题，也收获了一些经验，在这里分享一下。</p>\n<h2>时间线简介<a class=\"header-anchor\" id=\"%E6%97%B6%E9%97%B4%E7%BA%BF%E7%AE%80%E4%BB%8B\" href=\"#%E6%97%B6%E9%97%B4%E7%BA%BF%E7%AE%80%E4%BB%8B\">#</a></h2>\n<p>我们首先约定，时间轴上存在个体的基本单位叫「事件」。例如今天 <code>2020/04/24 12:30:30</code> 发生了事件 A，那么我们就把它记录下来；当今天 <code>2020/04/24 13:59:59</code> 又发生了事件 B，我们也把它记录下来。直到最后在时间轴上显示出来。</p>\n<p>为了叙述方便，我们首先看看<strong>时间轴</strong>到底长什么样：</p>\n<p><img src=\"https://i.loli.net/2020/04/24/2IKDEmjxehdRMJr.png\" alt=\"\"></p>\n<p><em>GitHub 昨天晚上又崩了啊啊啊啊啊啊啊啊</em></p>\n<p>这就是时间轴，发生在同一天的事件会被归类到这一天下，然后再根据时间点分别排列事件的内容。然后针对之前的每一天，就像这样排列着</p>\n<p><img src=\"https://i.loli.net/2020/04/24/iahYfX7Fz4HgDpI.png\" alt=\"\"></p>\n<p>这样便可以准确地反映一个轴的概念——左侧是一个代表「轴」的竖线，上面穿插着日期，每一天都有记录。如果这一天发生了什么事情，就把具体的时间点（时、分、秒）记录下来，然后将这个事件的具体内容表示出来。</p>\n<h2>记录时间与写入数据库<a class=\"header-anchor\" id=\"%E8%AE%B0%E5%BD%95%E6%97%B6%E9%97%B4%E4%B8%8E%E5%86%99%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93\" href=\"#%E8%AE%B0%E5%BD%95%E6%97%B6%E9%97%B4%E4%B8%8E%E5%86%99%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93\">#</a></h2>\n<p>接下来说说如何记录时间。其实很简单，在插入数据库的时候生成时间就好了。为了方便，我们生成的时间是可以被应用到 JavaScript 的 <code>Date</code> 对象的。格式大概如下：</p>\n<div class=\"notice tip\"><p>:snake: 以下语句来自 Python 语言。</p>\n</div>\n<div class=\"language-python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> time\n\n<span class=\"token comment\"># ...</span>\n\ndate <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">\"%Y-%m-%d %H:%M:%S\"</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>localtime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>那么此时我们的数据库里应该记录了这个事件的内容和时间，但似乎还缺点什么。那就是自增键。对于任何一个可以无限扩大的数据集合，我们都要想办法把它们编号。因为除了 ID 以外没有更好更简单的方式来确定某一条数据的身份（仅限当前讨论范围内）。现在我们的表结构可以这样表示</p>\n<div class=\"language-sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>Events<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">int</span> <span class=\"token keyword\">unsigned</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span>\n    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>title<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>contents<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">text</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>date<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">CHARSET</span><span class=\"token operator\">=</span>utf8mb4<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>可以看到，我们将事件的内容分为了两个部分，<code>title</code> 和 <code>contents</code>；然后我们确定了一个自增键 <code>id</code> 用于给每条数据一个特殊的标识；最后就是记录这篇发布的日期。至此，我们就大概完成了数据的写入部分，实际操作起来按照一般逻辑即可。</p>\n<h2>获取数据和数组结构<a class=\"header-anchor\" id=\"%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E5%92%8C%E6%95%B0%E7%BB%84%E7%BB%93%E6%9E%84\" href=\"#%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E5%92%8C%E6%95%B0%E7%BB%84%E7%BB%93%E6%9E%84\">#</a></h2>\n<p>获取数据时，我们会出现一些疑问。如果我们直接获取这些数据库里面的数据，很有可能得到下面的这个数组：</p>\n<div class=\"language-javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"example1\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">contents</span><span class=\"token operator\">:</span> <span class=\"token string\">\"example1-content\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2020/05/01 21:38:29\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"example2\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">contents</span><span class=\"token operator\">:</span> <span class=\"token string\">\"example2-content\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2020/05/01 22:59:30\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span>\n</code></pre></div>\n<p>如果这个时候直接拿到前端去渲染，一定会出现很多问题。因为这个数组里的每个对象都是独立的，但是它们的时间却又有可能处于同一天。我们的目的是将同一天的两个事件合并，然后再根据具体的时分秒在当天进行排序。如何合并？这就需要对数组采取一定的操作。</p>\n<p>我们首先需要想象出一个结构，来很好地处理这样一个需求。我们的需求是，忽略事件，当日期重复时，对其进行合并。究竟如何合并呢？这个时候我们的第一步是<strong>找到这些数据的共性</strong>。比如，目前为止我们能找到的共性只有日期这一个。当我们添加更多内容时，就有可能产生更多的共性。接下来仅围绕 <code>date</code> 这一个共性来讨论。</p>\n<p>既然有了共性，说明这些数据包含可以分享的部分，那么我们很容易得到如下结构</p>\n<div class=\"language-javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2020/05/01\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">events</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"example1\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">contents</span><span class=\"token operator\">:</span> <span class=\"token string\">\"example1-content\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">time</span><span class=\"token operator\">:</span> <span class=\"token string\">\"21:38:29\"</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"example2\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">contents</span><span class=\"token operator\">:</span> <span class=\"token string\">\"example2-content\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">time</span><span class=\"token operator\">:</span> <span class=\"token string\">\"22:59:30\"</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span>\n</code></pre></div>\n<p>这些处于同一天的数据被分类在一个对象的属性里，它们的 <code>date</code> 属性被拆分为了两个部分，<code>date.split(\" \")[0]</code> 作为日期被放在了「公共区」，<code>date.split(\" \")[1]</code> 则作为具体的事件被存储到每个独立的事件里。</p>\n<p>这个结构就可以被前端很好地处理，只需要进行两次遍历。例如在 Vue 中</p>\n<div class=\"language-html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>k in data<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>meta<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>date-icon<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>date<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>{{ k.date }}\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>events<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>a in k.events<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span>{{ a.title }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>time<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>{{ a.time }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>a.id<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>{{ a.id }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>event-content<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n                {{ a.contents }}\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p><em>仅供思路参考，实际使用需要额外处理</em></p>\n<p>那么又引出了一个问题，该如何把上面的数组变成我们想象的那个样子呢？</p>\n<h2>数组的处理<a class=\"header-anchor\" id=\"%E6%95%B0%E7%BB%84%E7%9A%84%E5%A4%84%E7%90%86\" href=\"#%E6%95%B0%E7%BB%84%E7%9A%84%E5%A4%84%E7%90%86\">#</a></h2>\n<div class=\"notice tip\"><p>☕📔 以下语句来自 JavaScript 语言</p>\n</div>\n<p>数组的处理环节是最让人头疼的。我们先把完整的代码放出来，再一行行解释。</p>\n<div class=\"language-javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">createArray</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    data<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">k<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> ix <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> d <span class=\"token operator\">=</span> k<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> date <span class=\"token operator\">=</span> d<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> time <span class=\"token operator\">=</span> d<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> sameDay <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">r<span class=\"token punctuation\">,</span> j</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>date <span class=\"token operator\">===</span> r<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                ix <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>sameDay<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                <span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> date<span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">events</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                    <span class=\"token punctuation\">{</span>\n                        <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> k<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n                        <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> k<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span>\n                        <span class=\"token literal-property property\">contents</span><span class=\"token operator\">:</span> k<span class=\"token punctuation\">.</span>contents<span class=\"token punctuation\">,</span>\n                        <span class=\"token literal-property property\">time</span><span class=\"token operator\">:</span> time<span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            arr<span class=\"token punctuation\">[</span>ix<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>events<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> k<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> k<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">contents</span><span class=\"token operator\">:</span> k<span class=\"token punctuation\">.</span>contents<span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">time</span><span class=\"token operator\">:</span> time<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>首先我们新声明一个数组 <code>let arr = []</code>，然后将数据中的日期分割 <code>k.date.split(\" \")</code>。后面用到了很重要的一点，<code>Array.prototype.some</code> 函数。这个函数用于判断是否通过了回调函数中指定的测试，返回一个布尔值。在这里我们手动在回调函数里加上了一行，<code>ix = j</code>，用于记录日期相同的对象所在的位置。</p>\n<p><code>some</code> 函数返回的布尔值被记录在 <code>sameDay</code> 这个变量中，如果为 <code>true</code> 就代表在同一天。下方判断 <code>if (!sameDay)</code>，如果通过，就会在新声明的数组里初始化一个结构——</p>\n<div class=\"language-javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> date<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">events</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> k<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> k<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">contents</span><span class=\"token operator\">:</span> k<span class=\"token punctuation\">.</span>contents<span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">time</span><span class=\"token operator\">:</span> time<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>这个结构记录一个日期和一个 <code>events</code> 属性，如果有和这个日期重复的 <code>event</code>，就会被拆分后 <code>push</code> 到里面（依据 <code>ix</code> 来寻址）：</p>\n<div class=\"language-javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"> arr<span class=\"token punctuation\">[</span>ix<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>events<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> k<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> k<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">contents</span><span class=\"token operator\">:</span> k<span class=\"token punctuation\">.</span>contents<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">time</span><span class=\"token operator\">:</span> time<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>实际运行效果如下：</p>\n<p><img src=\"https://i.loli.net/2020/04/24/GfcwK4nSRYat6rl.png\" alt=\"\"></p>\n<p>这个函数实际上显得比较复杂，如果有更好的办法，欢迎我交流。<router-link to=\"/contact.html\">联系</router-link></p>\n</div></template>","import { render } from \"./Array-Date-and-Category.vue?vue&type=template&id=65d57060\"\nconst script = {}\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["class","_createStaticVNode","_createElementVNode","_createTextVNode","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_29","_hoisted_30","_hoisted_31","_hoisted_32","_hoisted_33","_hoisted_34","_hoisted_35","_hoisted_36","_toDisplayString","_ctx","k","date","_hoisted_37","_hoisted_38","_hoisted_39","a","title","_hoisted_40","_hoisted_41","time","_hoisted_42","_hoisted_43","id","_hoisted_44","_hoisted_45","contents","_hoisted_46","_hoisted_47","_hoisted_48","_hoisted_49","_hoisted_50","_createVNode","_component_router_link","to","default","_withCtx","_","script","__exports__","render"],"sourceRoot":""}