"use strict";(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[912],{2912:function(n,a,s){s.r(a),s.d(a,{default:function(){return i}});var t=s(3396);const p={class:"content"},o=(0,t.uE)('<h1 class="post-title">一些 Vue 的常用技巧（续篇）<a class="header-anchor" id="%E4%B8%80%E4%BA%9B%20Vue%20%E7%9A%84%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7%EF%BC%88%E7%BB%AD%E7%AF%87%EF%BC%89" href="#%E4%B8%80%E4%BA%9B%20Vue%20%E7%9A%84%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7%EF%BC%88%E7%BB%AD%E7%AF%87%EF%BC%89">#</a></h1><div class="metabar"><div class="metabar-item">2023/01/26</div><div class="metabar-item">代码</div><div class="metabar-item">约 3 分钟读完</div></div><h2>5. 自制状态管理<a class="header-anchor" id="5.%20%E8%87%AA%E5%88%B6%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86" href="#5.%20%E8%87%AA%E5%88%B6%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86">#</a></h2><p>通常情况下想到全局的状态管理，最原始的方式是 eventbus，然而只能实现事件的通讯传递；数据在传递过程中必须有一层操作。若想用正规且有保障的方式，可以用 <a href="https://pinia.vuejs.org/" class="external-link" target="_blank" rel="noopener noreferrer">pinia<span class="external-link-icon mdi mdi-launch"></span></a> 或者 <a href="https://vuex.vuejs.org/" class="external-link" target="_blank" rel="noopener noreferrer">VueX<span class="external-link-icon mdi mdi-launch"></span></a>，然而都有杀鸡用牛刀之势。</p><p>一个最简单的状态管理，其实就是一个 <code>object</code>。但是为了对其的修改可以引起视图的更新，需要让其变得 <em>reactive</em>。这可以通过 Vue 自带的函数 <code>reactive</code> 实现。</p><div class="language-typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> states <span class="token operator">=</span> <span class="token punctuation">{</span>\n    state1<span class="token operator">:</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">,</span>\n    state2<span class="token operator">:</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">,</span>\n    state3<span class="token operator">:</span> <span class="token string">&quot;12&quot;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;vue/types/vue&#39;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">interface</span> <span class="token class-name">Vue</span> <span class="token punctuation">{</span>\n        $states<span class="token operator">:</span> <span class="token keyword">typeof</span> states\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nVue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$states <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>states<span class="token punctuation">)</span>\n</code></pre></div><p>此时在组件里可以通过调用 <code>this.$states.state3 = &#39;123&#39;</code> 引起视图的更新。</p><h2>6. <code>v-model</code> 的使用<a class="header-anchor" id="6.%20v-model%20%E7%9A%84%E4%BD%BF%E7%94%A8" href="#6.%20v-model%20%E7%9A%84%E4%BD%BF%E7%94%A8">#</a></h2><div class="notice tip"><p><code>v-model</code> 是常用的 Vue Directive 之一。在这里清晰地介绍其用法。</p></div><p>在编写 checkbox、dialog 等组件的时候，经常需要在父组件内控制子组件的状态。例如</p><div class="language-html"><pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Dialog</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dialogState<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">{</span>\n            <span class="token literal-property property">dialogState</span><span class="token operator">:</span> <span class="token boolean">false</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>这一点在子组件内如何实现呢？官方提供了 <code>v-model</code> 这一方案，实际上是语法糖。</p><div class="language-html"><pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>data<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>data<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@input</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>data = $event.target.value<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>以上两行代码应当是等价的。具体的逻辑是</p><ul><li>父组件向子组件传入 <code>data</code>（对应 props 中的 <code>value</code>）</li><li>子组件使用此 <code>data</code></li><li>有需要时，子组件使用 <code>$emit</code> 触发 <code>input</code> 事件提出更新，父组件更新相应的值，导致 <code>data</code> 传入子组件 props 的值发生变化</li><li>子组件使用新的 <code>data</code> 值</li></ul><p>这一整个逻辑都可以使用 <code>v-model=&#39;data&#39;</code> 做到。例如对话框</p><div class="language-html"><pre class="language-html"><code class="language-html">父组件：\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dlg</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dialog<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dialog = false<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>关闭<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dlg</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n\n子组件：\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dialog<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">dialog</span><span class="token operator">:</span> Boolean\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;keydown&#39;</span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>key <span class="token operator">===</span> <span class="token string">&#39;Escape&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div>',17),e=[o];function c(n,a){return(0,t.wg)(),(0,t.iD)("div",p,e)}var l=s(89);const u={},k=(0,l.Z)(u,[["render",c]]);var i=k}}]);
//# sourceMappingURL=912.a34e286e.js.map