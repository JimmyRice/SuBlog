{"version":3,"file":"js/785.27aa29ed.js","mappings":"2KAAKA,MAAM,W,GAAXC,EAAAA,EAAAA,IAAA,6uvB,GAAqBC,G,kCAArBC,EAAAA,EAAAA,IAmKM,MAnKNC,EAAAC,E,aCCA,MAAMC,EAAS,CAAC,EAGVC,GAA2B,OAAgBD,EAAQ,CAAC,CAAC,SAASE,KAEpE,O","sources":["webpack://blog/./src/posts/Simple-Vue-Tricks.vue","webpack://blog/./src/posts/Simple-Vue-Tricks.vue?2e7a"],"sourcesContent":["<template><div class=\"content\"><h1 class=\"post-title\">一些 Vue 的常用技巧<a class=\"header-anchor\" id=\"%E4%B8%80%E4%BA%9B%20Vue%20%E7%9A%84%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7\" href=\"#%E4%B8%80%E4%BA%9B%20Vue%20%E7%9A%84%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7\">#</a></h1><div class=\"metabar\"><div class=\"metabar-item\">2022/06/08</div><div class=\"metabar-item\">代码</div><div class=\"metabar-item\">约 12 分钟读完</div></div>\n<p>在长期使用 Vue 的过程中，我并不清楚是否是因为自己对这些东西的实现逻辑太过于奇妙，才催生了这些技巧的产生。也许这些问题在 React 中压根也不会出现吧...？在这里浅记录一下以便以后查看，<s>顺便水一下。</s></p>\n<p>不过，这些技巧很大部分都仅适用于在 TypeScript 加持的情况下。有的时候用 TS 甚至觉得整个过程变得更加复杂，网上的有些代码甚至是库都没办法好好直接使用。好在现在这种情况正在减少。总之 TS 对于大项目来说是绝对稳的！但是小项目就不一定值，甚至还有些舍近求远的意味；另外做<em>类型体操</em>真的很傻。</p>\n<p>下面以小标题的形式分开单独介绍。</p>\n<h2>1. VueX 中对 Mutation、Action 的规范化调用<a class=\"header-anchor\" id=\"1.%20VueX%20%E4%B8%AD%E5%AF%B9%20Mutation%E3%80%81Action%20%E7%9A%84%E8%A7%84%E8%8C%83%E5%8C%96%E8%B0%83%E7%94%A8\" href=\"#1.%20VueX%20%E4%B8%AD%E5%AF%B9%20Mutation%E3%80%81Action%20%E7%9A%84%E8%A7%84%E8%8C%83%E5%8C%96%E8%B0%83%E7%94%A8\">#</a></h2>\n<h3>介绍</h3>\n<p>一直不是很能理解为什么 VueX 中的 Mutation、Action 的函数在定义以后却要用字符串这样一种形式来识别。我当然也想不出更好的模式啦。</p>\n<p>例如：</p>\n<div class=\"language-typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">mutations<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">mutation</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> pay<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        state<span class=\"token punctuation\">.</span>abc <span class=\"token operator\">=</span> pay<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mutation'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>这就使这个过程完全丢失了 IDE 的支持。对于 VueX 中数据存放很多关系很复杂的情况来说，并不是很优雅，不过具体体现在维护而不是编写上。所以我更倾向于使用一种常量字符串的模式来定义函数名，并也在 <code>commit</code> 和 <code>dispatch</code> 函数参数中使用。对此，实际上官方给了一个<a href=\"https://vuex.vuejs.org/guide/mutations.html#using-constants-for-mutation-types\" class=\"external-link\" target=\"_blank\" rel=\"noopener noreferrer\">很完整的示例<span class=\"external-link-icon mdi mdi-launch\"></span></a>了。</p>\n<p>然而在这个示例中，到后期也会发展为这样的局面</p>\n<div class=\"language-typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">MUTATION1</span> <span class=\"token operator\">=</span> <span class=\"token string\">'MUTATION1'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">MUTATION2</span> <span class=\"token operator\">=</span> <span class=\"token string\">'MUTATION2'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> MUTATIONn <span class=\"token operator\">=</span> <span class=\"token string\">'MUTATIONn'</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"language-typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">MUTATION1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">MUTATION2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./mutationTypes'</span>\n</code></pre></div>\n<p>如果将它们整合到同一个 Object 中，效果会怎么样呢？</p>\n<p>当然这一切也只是从个人喜好出发的。正如官网所说：</p>\n<blockquote>\n<p>Whether to use constants is largely a preference - it can be helpful in large projects with many developers, <strong>but it's totally optional if you don't like them.</strong></p>\n</blockquote>\n<h3>实现</h3>\n<p>首先明确一点，常量字符串的内容就是 mutation 函数的名字。从这个角度出发，首先定义一个数组，里面包含了所有所需的 mutation。</p>\n<div class=\"language-typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> mutationTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'m1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'m2'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'mN'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>特别注意末尾的 <code>as const</code>，用于将这个变量的类型限定得尽可能小。也就是说 mutationTypes 总体上来说就是一个 <code>string[]</code>，但实际上也可以看成一个由它所有的值所构成的一个联合类型数组。<code>as const</code> 将其类型明确规定为后者。</p>\n<p>接下来将这个数组转换成一个联合类型，也就是 <code>'m1' | 'm2' | ... | 'mN'</code>。</p>\n<div class=\"language-typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">MutationTypes</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> mutationTypes<span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 如果上一步没有 as const，这里得到的结果就是 string。</span>\n</code></pre></div>\n<p>然后考虑将这个数组拓展成一个键和值相同的键值对，也就是 <code>{m1: 'm1', ...}</code>。这个键值对就是我们最终所要的结果。定义这个键值对的类型：</p>\n<div class=\"language-typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Result</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> MutationTypes<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n\t<span class=\"token comment\">// 这里也可以把值类型定为 MutationTypes，但是没有必要。</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>接下来构建这个键值对：</p>\n<div class=\"language-typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> result<span class=\"token operator\">:</span> Partial<span class=\"token operator\">&lt;</span>Result<span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\ntypes<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">:</span> MutationTypes<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n\tresult<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>Partial&lt;Result&gt;</code> 是为了让其初始值可以为空对象 <code>{}</code>。最后导出为 <code>Result</code> 类型即可。</p>\n<div class=\"language-typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> result <span class=\"token keyword\">as</span> Result<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>完整代码：</p>\n<div class=\"language-typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> mutationTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'m1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'m2'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'mN'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">MutationTypes</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> mutationTypes<span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Result</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> MutationTypes<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> result<span class=\"token operator\">:</span> Partial<span class=\"token operator\">&lt;</span>Result<span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\ntypes<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">:</span> MutationTypes<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    result<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> result <span class=\"token keyword\">as</span> Result<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>使用：</p>\n<div class=\"language-typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> mt <span class=\"token keyword\">from</span> <span class=\"token string\">'./mutationTypes'</span><span class=\"token punctuation\">;</span>\n\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span>mt<span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// &lt;-- 此时会出现 IDE 提示。</span>\n</code></pre></div>\n<p>IDE 提示效果：</p>\n<p><img src=\"https://s2.loli.net/2022/06/08/GKyCOJh7NVSQjMc.png\" alt=\"\"></p>\n<h2>2. Refs 的调用<a class=\"header-anchor\" id=\"2.%20Refs%20%E7%9A%84%E8%B0%83%E7%94%A8\" href=\"#2.%20Refs%20%E7%9A%84%E8%B0%83%E7%94%A8\">#</a></h2>\n<h3>介绍</h3>\n<p>一般在使用 <code>this.$refs</code> 的时候会面临没有任何 TypeScript 提示的问题，当对其进行复杂操作，如访问子组件的方法或数据以及操作 DOM 时，TypeScript 完全无法理解你在干什么。对此，实际上可以将其作为一个自定义类型的计算属性或者函数返回值来解决。这在需要对子组件进行频繁访问的情境下很有意义。</p>\n<h3>实现</h3>\n<p>实现起来很简单，在这里只是提供一个思路。</p>\n<div class=\"language-html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myElement<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>component</span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myComponent<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<div class=\"language-typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> Component <span class=\"token keyword\">from</span> <span class=\"token string\">'./Component.vue'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Vue<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\tcomponents<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\tComponent\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\tcomputed<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">myElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> HTMLDivElement <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$refs<span class=\"token punctuation\">.</span>myElement <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token function\">myComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> InstanceType<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> Component<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$refs<span class=\"token punctuation\">.</span>myComponent <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>这样的话直接访问 <code>this.myElement</code> 和 <code>this.myComponent</code> 就可以了，或者也可以将 computed 的内容换到 methods 里，使用 <code>this.myElement().xxx</code> 进行访问。但这里还会存在一些瑕疵，毕竟这一部分的类型操作不是由 TS 而是由你自行决定的。</p>\n<h3>问题：计算属性无法获得值</h3>\n<p>因为 refs 本身并不是响应式的，这里放到 computed 里属于是强行加上响应式。实际上只有在组件被渲染以后，<code>this.$refs</code> 才能获取到值，否则就是 <code>undefined</code>。这导致直接访问相应计算属性总会得到一个 <code>undefined</code> 的结果，可能造成崩溃。解决办法是识别组件 mount，在此之前不返回 refs 的值。</p>\n<div class=\"language-typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">myComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> InstanceType<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> Component<span class=\"token operator\">&gt;</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isMounted<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$refs<span class=\"token punctuation\">.</span>myComponent <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"notice tip\"><p><code>InstanceType&lt;typeof Component&gt;</code> 是很好用的一个类型推断，它可以用来直接识别出实例化以后的类型。将该类型作为返回值类型，可以让 IDE 中直接提示子组件所具有的方法和值等，十分方便。如果直接使用 <code>typeof Component</code>，得到的是未实例化的原始 class 类型。</p>\n</div>\n<p>然后在 mounted 钩子里加上 <code>this.isMounted = true</code> 即可。参考 <a href=\"https://stackoverflow.com/questions/43531755/using-refs-in-a-computed-property\" class=\"external-link\" target=\"_blank\" rel=\"noopener noreferrer\">StackOverflow - Using Refs in a Computed Property<span class=\"external-link-icon mdi mdi-launch\"></span></a>。</p>\n<p>另外还有一种特殊情况是这个组件<strong>并不会马上被使用</strong>，这就需要根据组件自身 mount 的情况来定了。解决思路是在组件内部的 mounted 钩子中触发事件，例如 <code>this.$emit('mounted')</code>，然后父组件监听该事件改变自身相关变量，再加上类似于上面的 <code>if (!isMounted) return;</code> 结构。</p>\n<p>如果嫌麻烦，可以使用函数的方法，使用体验基本没差。</p>\n<h3>问题：组件本身可能就是 <code>undefined</code></h3>\n<p>通常情况下这是不会的，但是如果存在相关的可能，就不能不考虑。此时应当将返回值定为相应类型与 <code>undefined</code> 的联合类型。</p>\n<h2>3. 定义全局函数<a class=\"header-anchor\" id=\"3.%20%E5%AE%9A%E4%B9%89%E5%85%A8%E5%B1%80%E5%87%BD%E6%95%B0\" href=\"#3.%20%E5%AE%9A%E4%B9%89%E5%85%A8%E5%B1%80%E5%87%BD%E6%95%B0\">#</a></h2>\n<h3>介绍</h3>\n<p>不仅仅是全局函数，也可以是类实例或者简单的值。唯一的目的是调用方便。这参考了一些注入的全局变量，例如 <code>this.$route</code>、<code>this.$store</code>。开发早期如果不需要 VueX 而需要采用 event bus 的方案的话，也可以使用这种办法来定义全局量，从而可以在任何地方方便访问。</p>\n<h3>实现</h3>\n<p>要写入全局变量，只需要在 <code>main.ts</code> 中定义 Vue 的 prototype。</p>\n<div class=\"language-typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Hello <span class=\"token keyword\">from</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">;</span>\n\nVue<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>$hello <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nVue<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>$bus <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// event bus 实际上就是一个空的 Vue 实例</span>\n</code></pre></div>\n<p>但是这样还不够，TS 并不知道这是什么意思。要解决这一点，需要在项目编译路径（一般就是 <code>src</code> 里的任意一个位置）编写一个 <code>.d.ts</code>，内容如下：</p>\n<div class=\"language-typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Hello <span class=\"token keyword\">from</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> h <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> v <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">'vue/types/vue'</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Vue</span> <span class=\"token punctuation\">{</span>\n        $hello<span class=\"token operator\">:</span> <span class=\"token keyword\">typeof</span> h<span class=\"token punctuation\">;</span>\n        $bus<span class=\"token operator\">:</span> <span class=\"token keyword\">typeof</span> v<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>上面两者的类型写法等价于用 <code>InstanceType&lt;typeof class&gt;</code> 的写法。这样就可以在实际编写中随便用了。</p>\n<h2>4. 融合样式代码<a class=\"header-anchor\" id=\"4.%20%E8%9E%8D%E5%90%88%E6%A0%B7%E5%BC%8F%E4%BB%A3%E7%A0%81\" href=\"#4.%20%E8%9E%8D%E5%90%88%E6%A0%B7%E5%BC%8F%E4%BB%A3%E7%A0%81\">#</a></h2>\n<h3>介绍</h3>\n<p>写 Less 的时候用到的一些变量如果想要起到全局的作用，仅仅在 <code>main.ts</code> 里 import 并不够，还需要在每个 CSS 代码中加入。使用这个插件可以让所有样式代码互通有无。这个插件由官方文档推荐，既可以通过 Vue CLI 使用，也可以自行配置到 Webpack 中。</p>\n<h3>实现</h3>\n<p>对于 Vue CLI，安装相应的插件并配置即可。</p>\n<div class=\"language-plaintext\"><pre class=\"language-plaintext\"><code class=\"language-plaintext\">vue add style-resources-loader\n</code></pre></div>\n<p>参考配置（<code>vue.config.js</code>）：</p>\n<div class=\"language-js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">pluginOptions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token string-property property\">'style-resources-loader'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token literal-property property\">preProcessor</span><span class=\"token operator\">:</span> <span class=\"token string\">'less'</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token literal-property property\">patterns</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'./src/styles/*.less'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 这里填要融合的样式文件。</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>对于 Webpack 请查看仓库：<a href=\"https://github.com/yenshih/style-resources-loader\" class=\"external-link\" target=\"_blank\" rel=\"noopener noreferrer\">yenshih/style-resources-loader<span class=\"external-link-icon mdi mdi-launch\"></span></a>。</p>\n<h2>总结<a class=\"header-anchor\" id=\"%E6%80%BB%E7%BB%93\" href=\"#%E6%80%BB%E7%BB%93\">#</a></h2>\n<p>后期如果还有类似的想法或许会在这篇文章上更新，目前分享的也就这些了。如果你认为有些地方不太合理或者有更好的方法，亦或者有疑问，欢迎与我探讨。</p>\n</div></template>","import { render } from \"./Simple-Vue-Tricks.vue?vue&type=template&id=953f04ee\"\nconst script = {}\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["class","_createStaticVNode","_hoisted_2","_createElementBlock","_hoisted_1","_hoisted_74","script","__exports__","render"],"sourceRoot":""}