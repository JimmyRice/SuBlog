"use strict";(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[325],{2325:function(n,s,a){a.r(s),a.d(s,{default:function(){return i}});var p=a(3396);const t={class:"content"},o=(0,p.uE)('<h1 class="post-title">常用 CRUD 前后端架构<a class="header-anchor" id="%E5%B8%B8%E7%94%A8%20CRUD%20%E5%89%8D%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84" href="#%E5%B8%B8%E7%94%A8%20CRUD%20%E5%89%8D%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84">#</a></h1><div class="metabar"><div class="metabar-item">2023/01/26</div><div class="metabar-item">代码</div><div class="metabar-item">约 8 分钟读完</div></div><p>在写一些自用的小程序（not wechat mini-programs）或者搭建一个简易的前后台关系时，通常都要进行以下几点的设计</p><ul><li>前后端请求—返回数据的约定</li><li>数据库的调用</li><li>登录认证</li><li>分页</li></ul><p>显然这些设计可以被模式化和模板化，从而提高创建它们的效率。</p><p>而不将它们完全作为模板，是因为在这之间还存在着相当大的需求变量；代码层面上，在此基础上可以进行其它扩充。例如对于即使更新的需求，可以加入 websocket 等模块（<s>虽然大多数情况下为了省事，我选择 CRUD 轮询</s>）；以及为了安全性可以进行更多修改和优化，等等。</p><p>下面以 TypeScript 和 Python 举例，其它语言同理。</p><h2>请求—返回数据的约定<a class="header-anchor" id="%E8%AF%B7%E6%B1%82%E2%80%94%E8%BF%94%E5%9B%9E%E6%95%B0%E6%8D%AE%E7%9A%84%E7%BA%A6%E5%AE%9A" href="#%E8%AF%B7%E6%B1%82%E2%80%94%E8%BF%94%E5%9B%9E%E6%95%B0%E6%8D%AE%E7%9A%84%E7%BA%A6%E5%AE%9A">#</a></h2><p>首先，我们在后端使用统一的函数进行返回。例如</p><div class="language-python"><pre class="language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">response</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> data<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        <span class="token string">&#39;data&#39;</span><span class="token punctuation">:</span> data<span class="token punctuation">,</span>\n        <span class="token string">&#39;status&#39;</span><span class="token punctuation">:</span> status<span class="token punctuation">,</span>\n        <span class="token string">&#39;msg&#39;</span><span class="token punctuation">:</span> msg\n    <span class="token punctuation">}</span>\n\ndata <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>\nmessage <span class="token operator">=</span> <span class="token string">&#39;An error occurred.&#39;</span>\n\nresponse<span class="token punctuation">(</span>status<span class="token operator">=</span><span class="token string">&#39;ok&#39;</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>\nresponse<span class="token punctuation">(</span>status<span class="token operator">=</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> msg<span class="token operator">=</span>message<span class="token punctuation">)</span>\n</code></pre></div><p>利用 <a href="https://axios-http.com/" class="external-link" target="_blank" rel="noopener noreferrer">axios<span class="external-link-icon mdi mdi-launch"></span></a>，可以方便地处理返回数据的类型。</p><div class="language-typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token comment">// axios 默认返回中，data 才是后端来的数据。</span>\naxios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>\n    response <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> response<span class="token punctuation">.</span>data\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    err <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n<span class="token punctuation">)</span>\n\n<span class="token comment">// ...</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">ReponseType</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    data<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token comment">// 可调整</span>\n    status<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n    msg<span class="token operator">:</span> <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">post</span><span class="token punctuation">(</span>url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> data<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">post</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span> ReponseType<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        headers<span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 可用于添加 Authorization</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><code>ResponseType</code> 即为返回值的骨架类型，可以放在 <code>axios.post</code> 和 <code>axios.get</code> 两个函数的第二个泛型参数上指定返回值（即在 interceptor 里拦截到的 <code>response.data</code>）的类型。</p><p>这样在请求时大致就是如下的情形了：</p><div class="language-typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/abc&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    abc<span class="token operator">:</span> <span class="token string">&#39;def&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>r <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">&#39;ok&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// ...</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2>数据库的调用<a class="header-anchor" id="%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%B0%83%E7%94%A8" href="#%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%B0%83%E7%94%A8">#</a></h2><p>数据的调用，在 Python 里通常使用 <code>pymysql</code> 库。</p><div class="language-python"><pre class="language-python"><code class="language-python"><span class="token keyword">from</span> pymysql <span class="token keyword">import</span> connect<span class="token punctuation">,</span> cursors\n\n<span class="token keyword">def</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">return</span> connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">&#39;localhost&#39;</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">&#39;def&#39;</span><span class="token punctuation">,</span> database<span class="token operator">=</span><span class="token string">&#39;target_db&#39;</span><span class="token punctuation">,</span> cursorclass<span class="token operator">=</span>cursors<span class="token punctuation">.</span>DictCursor<span class="token punctuation">)</span>\n</code></pre></div><p>注意到 <code>cursorclass</code> 在这里是一个很重要的参数。在 PHP 的 <code>mysqli</code> 中，通常是通过指定 <code>mysqli::fetch_all</code> 的第一个参数 <code>int $mode</code> 来实现的。这里的 <code>cursors.DictCursor</code> 对应 <code>MYSQLI_ASSOC</code>。</p><div class="language-php"><pre class="language-php"><code class="language-php"><span class="token variable">$mysqli</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;localhost&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;def&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;target_db&#39;</span><span class="token punctuation">)</span>\n\n<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$mysqli</span><span class="token operator">-&gt;</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;SELECT ...&quot;</span><span class="token punctuation">)</span>\n\n<span class="token variable">$rows</span> <span class="token operator">=</span> <span class="token variable">$result</span><span class="token operator">-&gt;</span><span class="token function">fetch_all</span><span class="token punctuation">(</span><span class="token constant">MYSQLI_ASSOC</span><span class="token punctuation">)</span>\n</code></pre></div><p>然后对于内容的取得就是如同上面 php 代码里所示的司空见惯的逻辑。</p><div class="language-python"><pre class="language-python"><code class="language-python"><span class="token keyword">with</span> connect<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> conn<span class="token punctuation">:</span>\n    <span class="token keyword">with</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cur<span class="token punctuation">:</span>\n        cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>conn<span class="token punctuation">.</span>escape_string<span class="token punctuation">(</span><span class="token string">&#39;SELECT ...&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token keyword">return</span> cur<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token comment"># 或者</span>\n    conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><h2>登录认证<a class="header-anchor" id="%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81" href="#%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81">#</a></h2>',23),e=(0,p._)("code",null,"jwt",-1),c=(0,p.uE)('<div class="language-python"><pre class="language-python"><code class="language-python"><span class="token keyword">from</span> jwt <span class="token keyword">import</span> encode<span class="token punctuation">,</span> decode<span class="token punctuation">,</span> DecodeError\n\n<span class="token keyword">def</span> <span class="token function">getToken</span><span class="token punctuation">(</span>argument1<span class="token punctuation">,</span> argument2<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    payload <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token string">&#39;iat&#39;</span><span class="token punctuation">:</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token string">&#39;exp&#39;</span><span class="token punctuation">:</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">5.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment"># 可调整</span>\n        <span class="token string">&#39;argument1&#39;</span><span class="token punctuation">:</span> argument1<span class="token punctuation">,</span>\n        <span class="token string">&#39;argument2&#39;</span><span class="token punctuation">:</span> argument2\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> encode<span class="token punctuation">(</span>payload<span class="token punctuation">,</span> <span class="token string">&#39;secret&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;HS256&#39;</span><span class="token punctuation">)</span>\n\n<span class="token keyword">def</span> <span class="token function">verifyToken</span><span class="token punctuation">(</span>jwt<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">if</span> jwt <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>\n        <span class="token keyword">return</span> <span class="token boolean">False</span>\n    <span class="token keyword">try</span><span class="token punctuation">:</span>\n        decoded <span class="token operator">=</span> decode<span class="token punctuation">(</span>jwt<span class="token punctuation">,</span> <span class="token string">&#39;secret&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;HS256&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token keyword">except</span> DecodeError <span class="token keyword">as</span> e<span class="token punctuation">:</span>\n        <span class="token keyword">return</span> <span class="token boolean">False</span>\n    <span class="token keyword">if</span> decoded<span class="token punctuation">[</span><span class="token string">&#39;exp&#39;</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>timestamp<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">return</span> <span class="token boolean">True</span>\n    <span class="token keyword">return</span> <span class="token boolean">False</span>\n\n<span class="token keyword">def</span> <span class="token function">decodeToken</span><span class="token punctuation">(</span>jwt<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">if</span> <span class="token keyword">not</span> verify<span class="token punctuation">(</span>jwt<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">return</span> <span class="token boolean">None</span>\n    <span class="token keyword">assert</span> jwt <span class="token operator">!=</span> <span class="token boolean">None</span> <span class="token comment"># verify 函数确保 jwt 不是 None</span>\n    <span class="token keyword">return</span> decode<span class="token punctuation">(</span>jwt<span class="token punctuation">,</span> <span class="token string">&#39;secret&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;HS256&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre></div><p>然后在前端以一种安全的方式提交给后端即可，例如使用 Authorization Header。</p><div class="language-typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token comment">/* ...*/</span>token<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        headers<span class="token operator">:</span> <span class="token punctuation">{</span>\n            Authorization<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">JWT </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>后端在验证时，可以使用函数包装，将目标函数添加相应的检测流程。</p><div class="language-python"><pre class="language-python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> wraps\n<span class="token keyword">from</span> flask <span class="token keyword">import</span> request\n\n<span class="token keyword">def</span> <span class="token function">protected</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token decorator annotation punctuation">@wraps</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span> <span class="token comment"># 必须</span>\n    <span class="token keyword">def</span> <span class="token function">decorated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n        auth <span class="token operator">=</span> request<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;Authorization&quot;</span><span class="token punctuation">)</span>\n        <span class="token keyword">if</span> auth <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>\n            <span class="token keyword">return</span> response<span class="token punctuation">(</span>status<span class="token operator">=</span><span class="token string">&#39;invalid&#39;</span><span class="token punctuation">)</span>\n        token <span class="token operator">=</span> auth<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;JWT &quot;</span><span class="token punctuation">)</span>\n        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>token <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n            <span class="token keyword">return</span> response<span class="token punctuation">(</span>status<span class="token operator">=</span><span class="token string">&#39;invalid&#39;</span><span class="token punctuation">)</span>\n        tokenStr <span class="token operator">=</span> token<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>\n        <span class="token keyword">if</span> verifyToken<span class="token punctuation">(</span>tokenStr<span class="token punctuation">)</span><span class="token punctuation">:</span>\n            <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token keyword">else</span><span class="token punctuation">:</span>\n            <span class="token keyword">return</span> response<span class="token punctuation">(</span>status<span class="token operator">=</span><span class="token string">&#39;invalid&#39;</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> decorated\n\n<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>\n<span class="token decorator annotation punctuation">@protected</span>\n<span class="token keyword">def</span> <span class="token function">api</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token comment"># ...</span>\n    <span class="token keyword">return</span> <span class="token comment"># ...</span>\n</code></pre></div><h2>分页<a class="header-anchor" id="%E5%88%86%E9%A1%B5" href="#%E5%88%86%E9%A1%B5">#</a></h2><p>要完成分页，首先需要给数据增添数字标识，从而使得数据有序且顺序可比。这一点通常通过一个名为 id 的 key column 实现。</p><div class="language-sql"><pre class="language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>example<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>\n    <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">INT</span> <span class="token keyword">UNSIGNED</span> <span class="token keyword">KEY</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span>\n<span class="token punctuation">)</span>\n</code></pre></div><p>分页时，需要考虑到</p><ul><li>每页数据的数目 — 对应 SQL 中的 <code>LIMIT</code></li><li>数据的排列顺序 — 对应 SQL 中的 <code>ORDER BY</code></li></ul><p>且前端分页通常需要后端对下一页数据的预测数据的辅助。</p><p>例如我们简单地选取表中最开始的 10 个升序排列的行。</p><div class="language-sql"><pre class="language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">table</span> <span class="token keyword">WHERE</span> id <span class="token operator">&gt;=</span> <span class="token number">1</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> id <span class="token keyword">ASC</span> <span class="token keyword">LIMIT</span> <span class="token number">10</span><span class="token punctuation">;</span>\n<span class="token comment"># 或者</span>\n<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">table</span> <span class="token keyword">WHERE</span> id <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> id <span class="token keyword">ASC</span> <span class="token keyword">LIMIT</span> <span class="token number">10</span><span class="token punctuation">;</span>\n</code></pre></div><p>这可以作为第一页的内容。此时符合条件的行应当是 <code>id</code> 从 1 到 10 的所有行（没有 <code>id</code> 缺省的情况下）。接下来选择第二页的内容，即为</p><div class="language-sql"><pre class="language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">table</span> <span class="token keyword">WHERE</span> id <span class="token operator">&gt;=</span> <span class="token number">11</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> id <span class="token keyword">ASC</span> <span class="token keyword">LIMIT</span> <span class="token number">10</span><span class="token punctuation">;</span>\n<span class="token comment"># 或者</span>\n<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">table</span> <span class="token keyword">WHERE</span> id <span class="token operator">&gt;</span> <span class="token number">10</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> id <span class="token keyword">ASC</span> <span class="token keyword">LIMIT</span> <span class="token number">10</span><span class="token punctuation">;</span>\n</code></pre></div><p>然而在这里，大于号后面所跟的内容并不一定是 <code>10</code> 或者 <code>11</code>，因为可能中途有 <code>id</code> 的缺省。所以，这时候需要前端指定当前页面的最后一个数据的 <code>id</code> 提交给后端。我们将其称为 <code>indicatorId</code>。</p><p>于是更加准确的 SQL 应当写作</p><div class="language-sql"><pre class="language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">table</span> <span class="token keyword">WHERE</span> id <span class="token operator">&gt;</span> indicatorId <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> id <span class="token keyword">ASC</span> <span class="token keyword">LIMIT</span> <span class="token number">10</span><span class="token punctuation">;</span>\n</code></pre></div><p>Python 语句示例：</p><div class="language-python"><pre class="language-python"><code class="language-python">indicatorId <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;indicator&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>\npageSize <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;pageSize&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>\nsql <span class="token operator">=</span> <span class="token string">&quot;SELECT * FROM table WHERE id &gt; {0} ORDER BY id ASC LIMIT {1}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>indicatorId<span class="token punctuation">,</span> pageSize<span class="token punctuation">)</span>\n</code></pre></div><p>注意这里应当使用 <code>&gt;</code> 而不是 <code>&gt;=</code>。若要使用后者，则需要多一个 <code>+1</code> 的步骤。</p><p>同时，后端需要返回前端一个「是否有下一页」的信息，可让前端判断是否需要展示「下一页」的按钮。这一点在下滑加载（即滑到数据底部后，在底部添加上新的数据）的场景中比较适用。</p><p>判断是否有下一页，在升序中，只需要判断 <code>indicatorId</code> 是否就是表最后一行数据的 <code>id</code>；在降序中，只需要判断 <code>indicatorId</code> 是否就是表第一行数据的 <code>id</code>。</p><div class="language-python"><pre class="language-python"><code class="language-python">hasNext <span class="token operator">=</span> indicator <span class="token operator">!=</span> lastRowId <span class="token keyword">if</span> order <span class="token operator">==</span> <span class="token string">&#39;asc&#39;</span> <span class="token keyword">else</span> indicator <span class="token operator">!=</span> firstRowId\n</code></pre></div><p>如果要采用不同页加载（即每一页展示固定数量的数据，以页码标记页面）的场景，则可以返回一个总的页码数据。</p><div class="language-python"><pre class="language-python"><code class="language-python">rowAmount <span class="token operator">=</span> count<span class="token punctuation">(</span><span class="token string">&#39;table&#39;</span><span class="token punctuation">)</span> <span class="token comment"># count 函数返回一个表的（指定条件的）总行数</span>\npageAmount <span class="token operator">=</span> math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span>rowAmount <span class="token operator">/</span> pageSize<span class="token punctuation">)</span>\nhasNext <span class="token operator">=</span> currentPage <span class="token operator">&lt;</span> pageAmount\n</code></pre></div>',26);function l(n,s){const a=(0,p.up)("router-link");return(0,p.wg)(),(0,p.iD)("div",t,[o,(0,p._)("p",null,[(0,p.Uk)("登录认证的设计流程已经在有概述。本文所展示的是使用 "),e,(0,p.Uk)(" 库所实现的 Python 版本。"),(0,p.Wm)(a,{to:"./Simple-Authenticating-System"},{default:(0,p.w5)((()=>[(0,p.Uk)("这里")])),_:1})]),c])}var u=a(89);const k={},r=(0,u.Z)(k,[["render",l]]);var i=r}}]);
//# sourceMappingURL=325.3e03e23d.js.map