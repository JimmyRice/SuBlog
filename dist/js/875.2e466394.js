"use strict";(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[875],{2875:function(n,s,a){a.r(s),a.d(s,{default:function(){return h}});var t=a(3396),p=a(7139);const o={class:"content"},e=(0,t.uE)('<h1 class="post-title">简单的投票系统实现（一）<a class="header-anchor" id="%E7%AE%80%E5%8D%95%E7%9A%84%E6%8A%95%E7%A5%A8%E7%B3%BB%E7%BB%9F%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%B8%80%EF%BC%89" href="#%E7%AE%80%E5%8D%95%E7%9A%84%E6%8A%95%E7%A5%A8%E7%B3%BB%E7%BB%9F%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%B8%80%EF%BC%89">#</a></h1><div class="metabar"><div class="metabar-item">2020/05/13</div><div class="metabar-item">代码</div><div class="metabar-item">约 11 分钟读完</div></div><div class="notice tip"><p>:snake: 本文中大部分代码使用 Python 或 JavaScript 实现</p></div><p>没错，写这篇文章正是因为在业余开发一个简单的投票系统。要注意，这是<strong>简单</strong>的投票系统，因此并不具有广泛的应用前景，只是突然想到了这样的方法，分享一下。还是像往常一样，在开发一个功能之前，我们往往需要思考这个功能的细节部分该如何实现。这次的投票，我们大概需要思考如下内容：</p><ul><li>如何设计投票</li><li>投票的数据如何存储 <ul><li>我们需要哪些数据</li></ul></li><li>投票者应对数据有着怎样的权限</li><li>对投票项目的数目造成的更改会对数据产生怎样的影响</li><li>过滤重复的投票者</li><li>可视化地展示投票结果</li><li>...</li></ul><p><em>请不要把上面的内容看成目录，我不确定会不会 100% 按照它写</em></p><p>围绕着上面这些问题，从「多选式投票」的角度出发，我们来逐一解决并实现。</p><h2>设计投票<a class="header-anchor" id="%E8%AE%BE%E8%AE%A1%E6%8A%95%E7%A5%A8" href="#%E8%AE%BE%E8%AE%A1%E6%8A%95%E7%A5%A8">#</a></h2><p>一般来说，一个投票大概长这样：</p><div class="notice tip"><p><strong>我是投票的题目</strong></p><ul><li>选项 A</li><li>选项 B</li><li>选项 C</li></ul></div><p>标题并不重要，因为它只是一个纯文本，并不牵涉到任何复杂的操作，我们主要探讨选项部分。如果从组件的角度解释选项，大概就是同一个组件被利用了多次，每一个组件副本均有着不一样的文字，对应和控制着不一样的数据值。也正因为重复性，我们可以直接利用循环来「生成」这些选项。</p><p>我们首先需要定义一个描述该选项内容的文本数组，以及一个与文本数组相等长度的布尔数组，并将这个数组事先全部填为 false 以便记录。例如，如果我们要实现上面例子里的选项渲染，应当做的是：</p><div class="language-js"><pre class="language-js"><code class="language-js"><span class="token keyword">let</span> items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;选项 A&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;选项 B&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;选项 C&quot;</span><span class="token punctuation">]</span>\n<span class="token keyword">let</span> dataArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span>\n</code></pre></div><p>更广泛的方法：</p><div class="language-js"><pre class="language-js"><code class="language-js"><span class="token keyword">let</span> items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span> <span class="token comment">/* ... */</span><span class="token punctuation">]</span>\n<span class="token keyword">let</span> dataArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\ndataArray<span class="token punctuation">.</span>length <span class="token operator">=</span> items<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\ndataArray <span class="token operator">=</span> dataArray<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>这样就可以轻松借助循环来实现在两个不同数组相同位置的数据关联。以 Vue 为例子：</p>',16),c={class:"language-html"},l={class:"language-html"},u={class:"language-html"},k=(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("div")]),(0,t._)("span",{class:"token punctuation"},">")],-1),i=(0,t.uE)('<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>whatever</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(x, i) in items<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>i<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dataArray[i]<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>',1),r=(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("whatever")]),(0,t._)("span",{class:"token punctuation"},">")],-1),d=(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("div")]),(0,t._)("span",{class:"token punctuation"},">")],-1),g=(0,t.uE)('<p>给 checkbox 或者 radio 组件绑定一个 <code>v-model</code> 指向数据数组的相应位置，那么该选项就与该位置的布尔值建立了联系。被选中为 <code>true</code>，未被选中或被反选则为 <code>false</code>。</p><h2>数据存储<a class="header-anchor" id="%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8" href="#%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8">#</a></h2><p>我们选择使用最简单的方法——将数组以字符串的形式存储到数据库的表中。一般来说，对于复杂的情况，我们也许要记录用户或者其它杂七杂八的，但对于这种简单的情况，我们只需要收集<em>有多少人选择了这一项</em>。那么首先我们需要弄清楚的一个问题，如何将 <code>[false, true, false, false]</code> 这样的数组，转换为一个记录每项选中人数的数组。</p><p>既然我们的数组里每一个布尔值，都跟一个唯一的选项对应，那么我们可以记录所有为 <code>true</code> 的值在数组中的位置。例如，我们可以创造一个函数 <code>getTrueIndexes(array: Array&lt;boolean&gt;): Array&lt;number&gt;</code>：</p><div class="language-js"><pre class="language-js"><code class="language-js"><span class="token function">getTrueIndexes</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token comment">// =&gt; [2]</span>\n\n<span class="token function">getTrueIndexes</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token comment">// =&gt; [0, 2, 3]</span>\n\n<span class="token function">getTrueIndexes</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token comment">// =&gt; []</span>\n</code></pre></div><p>简单实现：</p><div class="language-ts"><pre class="language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">getTrueIndexes</span><span class="token punctuation">(</span>array<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\t<span class="token comment">// 用 for 也可以</span>\n\tarray<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>k<span class="token punctuation">)</span> arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\t<span class="token keyword">return</span> arr<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>接下来我们来讲讲如何去存储每个选项选中的人数。一些人可能开始会想到这样的结构：</p><div class="language-js"><pre class="language-js"><code class="language-js"><span class="token punctuation">{</span>\n    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">4</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>也就是利用对象的键值构建选项与人数之间的关系。</p><p>这种办法的缺点也很明显——<em>键</em>显得很没必要。因为正如前文所介绍，投票项目呈<strong>有序排列</strong>的（即每一个项目的位置均与最终数据有对应联系），因此使用<strong>数组</strong>并无大碍；对象则将每一个选项的独特标识关联到了一个特定的数据，这种结构似乎更适用于那种可能会被打乱的数据集，或者更为复杂的投票结构，对于本文中的「简单」投票系统没有实际意义，同时也会对后面的操作造成困难。</p><p>所以，我们最终所需要的只是</p><div class="language-js"><pre class="language-js"><code class="language-js"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>\n</code></pre></div><p>这是什么意思？还是上文中的例子，这代表着选项 A 有一人选中，选项 B 有两人选中，选项 C 有四人选中。</p><p>对于此数组的初始化，不同于前文的 <code>[false, false, false]</code>，它应当位于后端。使用 Python 可以轻松做到</p><div class="language-python"><pre class="language-python"><code class="language-python"><span class="token comment"># items 即前端中的选项文字数组</span>\nvoteData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n</code></pre></div><p>那么这个时候 <code>voteData</code> 就会被初始化为一个全为 <code>0</code> 的数组，就像 <code>[0, 0, 0, 0]</code>，代表还没有任何人投任何项。</p><p>回到之前的话题来，我们获得了一个标注了「被选中」项目（即为 <code>true</code> 的项目）的位置的数组，然后此时我们要以它为依据对位于后端的统计人数的数组做出修改。实际上很简单</p><div class="language-python"><pre class="language-python"><code class="language-python"><span class="token comment"># 假设：来自前端的数据</span>\nvoteTargets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>\n<span class="token comment"># 假设：后端记录人数的数据</span>\nvoteData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>\n\n<span class="token keyword">for</span> i <span class="token keyword">in</span> voteTargets<span class="token punctuation">:</span>\n\tvoteData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>\n</code></pre></div><p>也就是这样，可以直接实现对数组指定位置的修改。其中 <code>+= 1</code> 是定值，除非是想要让每个人的一票变成多票。</p><h2>修改投票<a class="header-anchor" id="%E4%BF%AE%E6%94%B9%E6%8A%95%E7%A5%A8" href="#%E4%BF%AE%E6%94%B9%E6%8A%95%E7%A5%A8">#</a></h2><p>如果我们要对原先的投票项目做出修改（不是修改数据）怎么办？实际上，这是不被允许的——因为如果我们将投票的项目文本修改，就有可能影响投票本身的客观性，例如我们可以将「支持」项改成「反对」，这是很恐怖的。不过，本文只作技术讨论，具体地可以看情况进行取舍。</p><p>修改投票时，对应的数据的意义将会受到影响，在这里我们讨论两种极端情况，即「新建」和「清除」。</p><p>在对投票的项目进行编辑时，我们需要记录究竟删除了哪些项目，增加了多少项目？这些记录的代码可以放在删除或增加时所要调用的函数内。</p><div class="language-html"><pre class="language-html"><code class="language-html"><span class="token comment">&lt;!-- ... --&gt;</span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token punctuation">{</span>\n\t<span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token literal-property property">deletedCount</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n\t\t\t<span class="token comment">// ...</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t<span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\t<span class="token function">deleteVoteItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>deletedCount <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n\t\t\t<span class="token comment">// ...</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t<span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>如果删除了项目，则对应的数据也应当被删除。因此，还需要加上记录该被删除项目在数组中的位置的机制；如果增加了项目，那么也应当在数据数组的最后追加相应数量的 <code>0</code>。具体流程应遵循先删除旧项再添加新项的原则，否则会导致数据的对应问题。删除时，使用 <code>del</code> 关键字可以实现：</p><div class="language-python"><pre class="language-python"><code class="language-python"><span class="token comment"># 删除</span>\n<span class="token keyword">del</span> voteData<span class="token punctuation">[</span>index<span class="token punctuation">]</span>\n</code></pre></div><p>增加时，我们先创建上下文场景以便更好地叙述：</p><div class="language-python"><pre class="language-python"><code class="language-python"><span class="token comment"># 假设这是原先的投票项目数据</span>\nitemsOld <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;选项 A&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;选项 B&quot;</span><span class="token punctuation">]</span>\n<span class="token comment"># 假设这是添加后的投票项目数据</span>\nitemsNew <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;选项 A&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;选项 B&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;选项 C&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;选项 D&quot;</span><span class="token punctuation">]</span>\n<span class="token comment"># 假设这是原先的记录人数数据</span>\nvoteData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>\n</code></pre></div><p>原理与先前大致相同，添加了简单的计算：</p><div class="language-python"><pre class="language-python"><code class="language-python">voteDataNew <span class="token operator">=</span> voteData<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>itemsNew<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>itemsOld<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre></div><p>上述代码有没有问题？是有的。<code>extend</code> 方法会改变原先数组的数据而不会返回一个新的值，这与往常情况不同。因此，我们要去掉前面的赋值部分，否则会导致 <code>voteDataNew</code> 的值变为 <code>None</code></p><div class="language-python"><pre class="language-python"><code class="language-python">voteData<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>itemsNew<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>itemsOld<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token comment"># 然后再对 voteData 进行操作就行了</span>\n</code></pre></div><p>以及请不要使用 <code>append</code> 方法，否则可能让你的数组变成 <code>[0, 0, [0, 0]]</code>。</p><blockquote><p>To be honest, no one likes it.</p></blockquote><h2>未完待续<a class="header-anchor" id="%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BB%AD" href="#%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BB%AD">#</a></h2><div class="notice warning"><p>由于个人原因，此文章的续集可能需要较长时间完成。</p></div>',37);function m(n,s){return(0,t.wg)(),(0,t.iD)("div",o,[e,(0,t._)("div",c,[(0,t._)("pre",l,[(0,t._)("code",u,[k,(0,t.Uk)("\n  \t"),i,(0,t.Uk)("\n    \t"+(0,p.zw)(n.x)+"\n  \t",1),r,(0,t.Uk)("\n"),d,(0,t.Uk)("\n")])])]),g])}var E=a(89);const v={},b=(0,E.Z)(v,[["render",m]]);var h=b}}]);
//# sourceMappingURL=875.2e466394.js.map